
First Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032e8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003494  08003494  00013494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034ac  080034ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080034ac  080034ac  000134ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034b4  080034b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034b4  080034b4  000134b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034b8  080034b8  000134b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080034bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  2000000c  080034c8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  080034c8  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad35  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001872  00000000  00000000  0002ad71  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009f8  00000000  00000000  0002c5e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000930  00000000  00000000  0002cfe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022fd5  00000000  00000000  0002d910  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007c4b  00000000  00000000  000508e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d75cb  00000000  00000000  00058530  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012fafb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002988  00000000  00000000  0012fb78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800347c 	.word	0x0800347c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	0800347c 	.word	0x0800347c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fbcc 	bl	8000c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f814 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f914 	bl	8000724 <MX_GPIO_Init>
  MX_ETH_Init();
 80004fc:	f000 f87a 	bl	80005f4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000500:	f000 f8b8 	bl	8000674 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000504:	f000 f8e0 	bl	80006c8 <MX_USB_OTG_FS_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(500);
 8000508:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800050c:	f000 fc30 	bl	8000d70 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000510:	2101      	movs	r1, #1
 8000512:	4802      	ldr	r0, [pc, #8]	; (800051c <main+0x30>)
 8000514:	f001 fb65 	bl	8001be2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000518:	e7f6      	b.n	8000508 <main+0x1c>
 800051a:	bf00      	nop
 800051c:	40020400 	.word	0x40020400

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	; 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0320 	add.w	r3, r7, #32
 800052a:	2230      	movs	r2, #48	; 0x30
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f002 ff9c 	bl	800346c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	4b28      	ldr	r3, [pc, #160]	; (80005ec <SystemClock_Config+0xcc>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	4a27      	ldr	r2, [pc, #156]	; (80005ec <SystemClock_Config+0xcc>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	; 0x40
 8000554:	4b25      	ldr	r3, [pc, #148]	; (80005ec <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <SystemClock_Config+0xd0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a21      	ldr	r2, [pc, #132]	; (80005f0 <SystemClock_Config+0xd0>)
 800056a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800057c:	2301      	movs	r3, #1
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000580:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
 8000588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000590:	2304      	movs	r3, #4
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000594:	23a8      	movs	r3, #168	; 0xa8
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800059c:	2307      	movs	r3, #7
 800059e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0320 	add.w	r3, r7, #32
 80005a4:	4618      	mov	r0, r3
 80005a6:	f001 fc55 	bl	8001e54 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005b0:	f000 f966 	bl	8000880 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2105      	movs	r1, #5
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 feae 	bl	8002334 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005de:	f000 f94f 	bl	8000880 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005f8:	4b1c      	ldr	r3, [pc, #112]	; (800066c <MX_ETH_Init+0x78>)
 80005fa:	4a1d      	ldr	r2, [pc, #116]	; (8000670 <MX_ETH_Init+0x7c>)
 80005fc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80005fe:	4b1b      	ldr	r3, [pc, #108]	; (800066c <MX_ETH_Init+0x78>)
 8000600:	2201      	movs	r2, #1
 8000602:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000604:	4b19      	ldr	r3, [pc, #100]	; (800066c <MX_ETH_Init+0x78>)
 8000606:	2200      	movs	r2, #0
 8000608:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 800060a:	4b18      	ldr	r3, [pc, #96]	; (800066c <MX_ETH_Init+0x78>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000612:	4b16      	ldr	r3, [pc, #88]	; (800066c <MX_ETH_Init+0x78>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	3301      	adds	r3, #1
 8000618:	2280      	movs	r2, #128	; 0x80
 800061a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 800061c:	4b13      	ldr	r3, [pc, #76]	; (800066c <MX_ETH_Init+0x78>)
 800061e:	695b      	ldr	r3, [r3, #20]
 8000620:	3302      	adds	r3, #2
 8000622:	22e1      	movs	r2, #225	; 0xe1
 8000624:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_ETH_Init+0x78>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	3303      	adds	r3, #3
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000630:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_ETH_Init+0x78>)
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	3304      	adds	r3, #4
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800063a:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_ETH_Init+0x78>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	3305      	adds	r3, #5
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_ETH_Init+0x78>)
 8000646:	2200      	movs	r2, #0
 8000648:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <MX_ETH_Init+0x78>)
 800064c:	2200      	movs	r2, #0
 800064e:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_ETH_Init+0x78>)
 8000652:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000656:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <MX_ETH_Init+0x78>)
 800065a:	f000 fc91 	bl	8000f80 <HAL_ETH_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000664:	f000 f90c 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000470 	.word	0x20000470
 8000670:	40028000 	.word	0x40028000

08000674 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_USART3_UART_Init+0x4c>)
 800067a:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <MX_USART3_UART_Init+0x50>)
 800067c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_USART3_UART_Init+0x4c>)
 8000680:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000684:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_USART3_UART_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <MX_USART3_UART_Init+0x4c>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <MX_USART3_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_USART3_UART_Init+0x4c>)
 800069a:	220c      	movs	r2, #12
 800069c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <MX_USART3_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_USART3_UART_Init+0x4c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_USART3_UART_Init+0x4c>)
 80006ac:	f002 f834 	bl	8002718 <HAL_UART_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006b6:	f000 f8e3 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000028 	.word	0x20000028
 80006c4:	40004800 	.word	0x40004800

080006c8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006d6:	2204      	movs	r2, #4
 80006d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006dc:	2202      	movs	r2, #2
 80006de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006e8:	2202      	movs	r2, #2
 80006ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000700:	2201      	movs	r2, #1
 8000702:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800070c:	f001 fa84 	bl	8001c18 <HAL_PCD_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000716:	f000 f8b3 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000068 	.word	0x20000068

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	; 0x30
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
 800073e:	4b4b      	ldr	r3, [pc, #300]	; (800086c <MX_GPIO_Init+0x148>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a4a      	ldr	r2, [pc, #296]	; (800086c <MX_GPIO_Init+0x148>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b48      	ldr	r3, [pc, #288]	; (800086c <MX_GPIO_Init+0x148>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	4b44      	ldr	r3, [pc, #272]	; (800086c <MX_GPIO_Init+0x148>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a43      	ldr	r2, [pc, #268]	; (800086c <MX_GPIO_Init+0x148>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b41      	ldr	r3, [pc, #260]	; (800086c <MX_GPIO_Init+0x148>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b3d      	ldr	r3, [pc, #244]	; (800086c <MX_GPIO_Init+0x148>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a3c      	ldr	r2, [pc, #240]	; (800086c <MX_GPIO_Init+0x148>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b3a      	ldr	r3, [pc, #232]	; (800086c <MX_GPIO_Init+0x148>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b36      	ldr	r3, [pc, #216]	; (800086c <MX_GPIO_Init+0x148>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a35      	ldr	r2, [pc, #212]	; (800086c <MX_GPIO_Init+0x148>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b33      	ldr	r3, [pc, #204]	; (800086c <MX_GPIO_Init+0x148>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b2f      	ldr	r3, [pc, #188]	; (800086c <MX_GPIO_Init+0x148>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a2e      	ldr	r2, [pc, #184]	; (800086c <MX_GPIO_Init+0x148>)
 80007b4:	f043 0308 	orr.w	r3, r3, #8
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b2c      	ldr	r3, [pc, #176]	; (800086c <MX_GPIO_Init+0x148>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0308 	and.w	r3, r3, #8
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b28      	ldr	r3, [pc, #160]	; (800086c <MX_GPIO_Init+0x148>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a27      	ldr	r2, [pc, #156]	; (800086c <MX_GPIO_Init+0x148>)
 80007d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b25      	ldr	r3, [pc, #148]	; (800086c <MX_GPIO_Init+0x148>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f244 0181 	movw	r1, #16513	; 0x4081
 80007e8:	4821      	ldr	r0, [pc, #132]	; (8000870 <MX_GPIO_Init+0x14c>)
 80007ea:	f001 f9e1 	bl	8001bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2140      	movs	r1, #64	; 0x40
 80007f2:	4820      	ldr	r0, [pc, #128]	; (8000874 <MX_GPIO_Init+0x150>)
 80007f4:	f001 f9dc 	bl	8001bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007fe:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <MX_GPIO_Init+0x154>)
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	481b      	ldr	r0, [pc, #108]	; (800087c <MX_GPIO_Init+0x158>)
 800080e:	f001 f825 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000812:	f244 0381 	movw	r3, #16513	; 0x4081
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	4811      	ldr	r0, [pc, #68]	; (8000870 <MX_GPIO_Init+0x14c>)
 800082c:	f001 f816 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000830:	2340      	movs	r3, #64	; 0x40
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	2301      	movs	r3, #1
 8000836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	480b      	ldr	r0, [pc, #44]	; (8000874 <MX_GPIO_Init+0x150>)
 8000848:	f001 f808 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_GPIO_Init+0x150>)
 8000860:	f000 fffc 	bl	800185c <HAL_GPIO_Init>

}
 8000864:	bf00      	nop
 8000866:	3730      	adds	r7, #48	; 0x30
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40023800 	.word	0x40023800
 8000870:	40020400 	.word	0x40020400
 8000874:	40021800 	.word	0x40021800
 8000878:	10110000 	.word	0x10110000
 800087c:	40020800 	.word	0x40020800

08000880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
	...

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <HAL_MspInit+0x4c>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	4a0f      	ldr	r2, [pc, #60]	; (80008dc <HAL_MspInit+0x4c>)
 80008a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a4:	6453      	str	r3, [r2, #68]	; 0x44
 80008a6:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <HAL_MspInit+0x4c>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <HAL_MspInit+0x4c>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	4a08      	ldr	r2, [pc, #32]	; (80008dc <HAL_MspInit+0x4c>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	6413      	str	r3, [r2, #64]	; 0x40
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_MspInit+0x4c>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800

080008e0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08e      	sub	sp, #56	; 0x38
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a55      	ldr	r2, [pc, #340]	; (8000a54 <HAL_ETH_MspInit+0x174>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	f040 80a4 	bne.w	8000a4c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
 8000908:	4b53      	ldr	r3, [pc, #332]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 800090a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090c:	4a52      	ldr	r2, [pc, #328]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 800090e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000912:	6313      	str	r3, [r2, #48]	; 0x30
 8000914:	4b50      	ldr	r3, [pc, #320]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 8000916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800091c:	623b      	str	r3, [r7, #32]
 800091e:	6a3b      	ldr	r3, [r7, #32]
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
 8000924:	4b4c      	ldr	r3, [pc, #304]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000928:	4a4b      	ldr	r2, [pc, #300]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 800092a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800092e:	6313      	str	r3, [r2, #48]	; 0x30
 8000930:	4b49      	ldr	r3, [pc, #292]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000934:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000938:	61fb      	str	r3, [r7, #28]
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	2300      	movs	r3, #0
 800093e:	61bb      	str	r3, [r7, #24]
 8000940:	4b45      	ldr	r3, [pc, #276]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	4a44      	ldr	r2, [pc, #272]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 8000946:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800094a:	6313      	str	r3, [r2, #48]	; 0x30
 800094c:	4b42      	ldr	r3, [pc, #264]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000954:	61bb      	str	r3, [r7, #24]
 8000956:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	4b3e      	ldr	r3, [pc, #248]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 800095e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000960:	4a3d      	ldr	r2, [pc, #244]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 8000962:	f043 0304 	orr.w	r3, r3, #4
 8000966:	6313      	str	r3, [r2, #48]	; 0x30
 8000968:	4b3b      	ldr	r3, [pc, #236]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 800096a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096c:	f003 0304 	and.w	r3, r3, #4
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000974:	2300      	movs	r3, #0
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	4b37      	ldr	r3, [pc, #220]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	4a36      	ldr	r2, [pc, #216]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	6313      	str	r3, [r2, #48]	; 0x30
 8000984:	4b34      	ldr	r3, [pc, #208]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 8000986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	4b30      	ldr	r3, [pc, #192]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 8000996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000998:	4a2f      	ldr	r2, [pc, #188]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 800099a:	f043 0302 	orr.w	r3, r3, #2
 800099e:	6313      	str	r3, [r2, #48]	; 0x30
 80009a0:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 80009a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a4:	f003 0302 	and.w	r3, r3, #2
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 80009b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b4:	4a28      	ldr	r2, [pc, #160]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 80009b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ba:	6313      	str	r3, [r2, #48]	; 0x30
 80009bc:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 80009be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009c8:	2332      	movs	r3, #50	; 0x32
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009d8:	230b      	movs	r3, #11
 80009da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e0:	4619      	mov	r1, r3
 80009e2:	481e      	ldr	r0, [pc, #120]	; (8000a5c <HAL_ETH_MspInit+0x17c>)
 80009e4:	f000 ff3a 	bl	800185c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009e8:	2386      	movs	r3, #134	; 0x86
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f4:	2303      	movs	r3, #3
 80009f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009f8:	230b      	movs	r3, #11
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a00:	4619      	mov	r1, r3
 8000a02:	4817      	ldr	r0, [pc, #92]	; (8000a60 <HAL_ETH_MspInit+0x180>)
 8000a04:	f000 ff2a 	bl	800185c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a1a:	230b      	movs	r3, #11
 8000a1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a22:	4619      	mov	r1, r3
 8000a24:	480f      	ldr	r0, [pc, #60]	; (8000a64 <HAL_ETH_MspInit+0x184>)
 8000a26:	f000 ff19 	bl	800185c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a2a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a3c:	230b      	movs	r3, #11
 8000a3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a44:	4619      	mov	r1, r3
 8000a46:	4808      	ldr	r0, [pc, #32]	; (8000a68 <HAL_ETH_MspInit+0x188>)
 8000a48:	f000 ff08 	bl	800185c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000a4c:	bf00      	nop
 8000a4e:	3738      	adds	r7, #56	; 0x38
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40028000 	.word	0x40028000
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020800 	.word	0x40020800
 8000a60:	40020000 	.word	0x40020000
 8000a64:	40020400 	.word	0x40020400
 8000a68:	40021800 	.word	0x40021800

08000a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a19      	ldr	r2, [pc, #100]	; (8000af0 <HAL_UART_MspInit+0x84>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d12c      	bne.n	8000ae8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <HAL_UART_MspInit+0x88>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	4a17      	ldr	r2, [pc, #92]	; (8000af4 <HAL_UART_MspInit+0x88>)
 8000a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_UART_MspInit+0x88>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <HAL_UART_MspInit+0x88>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a10      	ldr	r2, [pc, #64]	; (8000af4 <HAL_UART_MspInit+0x88>)
 8000ab4:	f043 0308 	orr.w	r3, r3, #8
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <HAL_UART_MspInit+0x88>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0308 	and.w	r3, r3, #8
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ac6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ad8:	2307      	movs	r3, #7
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <HAL_UART_MspInit+0x8c>)
 8000ae4:	f000 feba 	bl	800185c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ae8:	bf00      	nop
 8000aea:	3728      	adds	r7, #40	; 0x28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40004800 	.word	0x40004800
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020c00 	.word	0x40020c00

08000afc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b1c:	d13f      	bne.n	8000b9e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <HAL_PCD_MspInit+0xac>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a20      	ldr	r2, [pc, #128]	; (8000ba8 <HAL_PCD_MspInit+0xac>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <HAL_PCD_MspInit+0xac>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b3a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b4c:	230a      	movs	r3, #10
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	4815      	ldr	r0, [pc, #84]	; (8000bac <HAL_PCD_MspInit+0xb0>)
 8000b58:	f000 fe80 	bl	800185c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	480e      	ldr	r0, [pc, #56]	; (8000bac <HAL_PCD_MspInit+0xb0>)
 8000b72:	f000 fe73 	bl	800185c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <HAL_PCD_MspInit+0xac>)
 8000b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <HAL_PCD_MspInit+0xac>)
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b80:	6353      	str	r3, [r2, #52]	; 0x34
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_PCD_MspInit+0xac>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	4a07      	ldr	r2, [pc, #28]	; (8000ba8 <HAL_PCD_MspInit+0xac>)
 8000b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b90:	6453      	str	r3, [r2, #68]	; 0x44
 8000b92:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <HAL_PCD_MspInit+0xac>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b9e:	bf00      	nop
 8000ba0:	3728      	adds	r7, #40	; 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020000 	.word	0x40020000

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c04:	f000 f894 	bl	8000d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <SystemInit+0x28>)
 8000c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c16:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <SystemInit+0x28>)
 8000c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <SystemInit+0x28>)
 8000c22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c26:	609a      	str	r2, [r3, #8]
#endif
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c70 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c3e:	e003      	b.n	8000c48 <LoopCopyDataInit>

08000c40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c46:	3104      	adds	r1, #4

08000c48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c48:	480b      	ldr	r0, [pc, #44]	; (8000c78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c50:	d3f6      	bcc.n	8000c40 <CopyDataInit>
  ldr  r2, =_sbss
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c54:	e002      	b.n	8000c5c <LoopFillZerobss>

08000c56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c58:	f842 3b04 	str.w	r3, [r2], #4

08000c5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c60:	d3f9      	bcc.n	8000c56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c62:	f7ff ffd3 	bl	8000c0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c66:	f002 fbdd 	bl	8003424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6a:	f7ff fc3f 	bl	80004ec <main>
  bx  lr    
 8000c6e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c70:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000c74:	080034bc 	.word	0x080034bc
  ldr  r0, =_sdata
 8000c78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c7c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000c80:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000c84:	200004bc 	.word	0x200004bc

08000c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC_IRQHandler>
	...

08000c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0d      	ldr	r2, [pc, #52]	; (8000ccc <HAL_Init+0x40>)
 8000c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <HAL_Init+0x40>)
 8000ca2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <HAL_Init+0x40>)
 8000cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 f92f 	bl	8000f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f000 f808 	bl	8000cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc0:	f7ff fde6 	bl	8000890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40023c00 	.word	0x40023c00

08000cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_InitTick+0x54>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_InitTick+0x58>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f939 	bl	8000f66 <HAL_SYSTICK_Config>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00e      	b.n	8000d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b0f      	cmp	r3, #15
 8000d02:	d80a      	bhi.n	8000d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d04:	2200      	movs	r2, #0
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f000 f90f 	bl	8000f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d10:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <HAL_InitTick+0x5c>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	e000      	b.n	8000d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000000 	.word	0x20000000
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	20000004 	.word	0x20000004

08000d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x20>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_IncTick+0x24>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <HAL_IncTick+0x24>)
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000008 	.word	0x20000008
 8000d54:	200004b8 	.word	0x200004b8

08000d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <HAL_GetTick+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	200004b8 	.word	0x200004b8

08000d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d78:	f7ff ffee 	bl	8000d58 <HAL_GetTick>
 8000d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d88:	d005      	beq.n	8000d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <HAL_Delay+0x40>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4413      	add	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d96:	bf00      	nop
 8000d98:	f7ff ffde 	bl	8000d58 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d8f7      	bhi.n	8000d98 <HAL_Delay+0x28>
  {
  }
}
 8000da8:	bf00      	nop
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000008 	.word	0x20000008

08000db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de6:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	60d3      	str	r3, [r2, #12]
}
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <__NVIC_GetPriorityGrouping+0x18>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	0a1b      	lsrs	r3, r3, #8
 8000e06:	f003 0307 	and.w	r3, r3, #7
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db0a      	blt.n	8000e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	490c      	ldr	r1, [pc, #48]	; (8000e64 <__NVIC_SetPriority+0x4c>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	0112      	lsls	r2, r2, #4
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e40:	e00a      	b.n	8000e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4908      	ldr	r1, [pc, #32]	; (8000e68 <__NVIC_SetPriority+0x50>)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	3b04      	subs	r3, #4
 8000e50:	0112      	lsls	r2, r2, #4
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	440b      	add	r3, r1
 8000e56:	761a      	strb	r2, [r3, #24]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000e100 	.word	0xe000e100
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	; 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f1c3 0307 	rsb	r3, r3, #7
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	bf28      	it	cs
 8000e8a:	2304      	movcs	r3, #4
 8000e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3304      	adds	r3, #4
 8000e92:	2b06      	cmp	r3, #6
 8000e94:	d902      	bls.n	8000e9c <NVIC_EncodePriority+0x30>
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3b03      	subs	r3, #3
 8000e9a:	e000      	b.n	8000e9e <NVIC_EncodePriority+0x32>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	401a      	ands	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	43d9      	mvns	r1, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	4313      	orrs	r3, r2
         );
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3724      	adds	r7, #36	; 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ee4:	d301      	bcc.n	8000eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00f      	b.n	8000f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <SysTick_Config+0x40>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef2:	210f      	movs	r1, #15
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f7ff ff8e 	bl	8000e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <SysTick_Config+0x40>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f02:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <SysTick_Config+0x40>)
 8000f04:	2207      	movs	r2, #7
 8000f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	e000e010 	.word	0xe000e010

08000f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff ff47 	bl	8000db4 <__NVIC_SetPriorityGrouping>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b086      	sub	sp, #24
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
 8000f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f40:	f7ff ff5c 	bl	8000dfc <__NVIC_GetPriorityGrouping>
 8000f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	68b9      	ldr	r1, [r7, #8]
 8000f4a:	6978      	ldr	r0, [r7, #20]
 8000f4c:	f7ff ff8e 	bl	8000e6c <NVIC_EncodePriority>
 8000f50:	4602      	mov	r2, r0
 8000f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff5d 	bl	8000e18 <__NVIC_SetPriority>
}
 8000f5e:	bf00      	nop
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ffb0 	bl	8000ed4 <SysTick_Config>
 8000f74:	4603      	mov	r3, r0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000f90:	4baa      	ldr	r3, [pc, #680]	; (800123c <HAL_ETH_Init+0x2bc>)
 8000f92:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e185      	b.n	80012b2 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d106      	bne.n	8000fc0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff fc90 	bl	80008e0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	4b9e      	ldr	r3, [pc, #632]	; (8001240 <HAL_ETH_Init+0x2c0>)
 8000fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc8:	4a9d      	ldr	r2, [pc, #628]	; (8001240 <HAL_ETH_Init+0x2c0>)
 8000fca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fce:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd0:	4b9b      	ldr	r3, [pc, #620]	; (8001240 <HAL_ETH_Init+0x2c0>)
 8000fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000fdc:	4b99      	ldr	r3, [pc, #612]	; (8001244 <HAL_ETH_Init+0x2c4>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	4a98      	ldr	r2, [pc, #608]	; (8001244 <HAL_ETH_Init+0x2c4>)
 8000fe2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000fe6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000fe8:	4b96      	ldr	r3, [pc, #600]	; (8001244 <HAL_ETH_Init+0x2c4>)
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a1b      	ldr	r3, [r3, #32]
 8000ff0:	4994      	ldr	r1, [pc, #592]	; (8001244 <HAL_ETH_Init+0x2c4>)
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f042 0201 	orr.w	r2, r2, #1
 8001008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800100c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800100e:	f7ff fea3 	bl	8000d58 <HAL_GetTick>
 8001012:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001014:	e011      	b.n	800103a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001016:	f7ff fe9f 	bl	8000d58 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001024:	d909      	bls.n	800103a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2203      	movs	r2, #3
 800102a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e13b      	b.n	80012b2 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1e4      	bne.n	8001016 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f023 031c 	bic.w	r3, r3, #28
 800105a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800105c:	f001 fb28 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 8001060:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	4a78      	ldr	r2, [pc, #480]	; (8001248 <HAL_ETH_Init+0x2c8>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d908      	bls.n	800107c <HAL_ETH_Init+0xfc>
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	4a77      	ldr	r2, [pc, #476]	; (800124c <HAL_ETH_Init+0x2cc>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d804      	bhi.n	800107c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	f043 0308 	orr.w	r3, r3, #8
 8001078:	61fb      	str	r3, [r7, #28]
 800107a:	e027      	b.n	80010cc <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	4a73      	ldr	r2, [pc, #460]	; (800124c <HAL_ETH_Init+0x2cc>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d908      	bls.n	8001096 <HAL_ETH_Init+0x116>
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	4a72      	ldr	r2, [pc, #456]	; (8001250 <HAL_ETH_Init+0x2d0>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d804      	bhi.n	8001096 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f043 030c 	orr.w	r3, r3, #12
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	e01a      	b.n	80010cc <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	4a6d      	ldr	r2, [pc, #436]	; (8001250 <HAL_ETH_Init+0x2d0>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d903      	bls.n	80010a6 <HAL_ETH_Init+0x126>
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	4a6c      	ldr	r2, [pc, #432]	; (8001254 <HAL_ETH_Init+0x2d4>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d911      	bls.n	80010ca <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	4a6a      	ldr	r2, [pc, #424]	; (8001254 <HAL_ETH_Init+0x2d4>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d908      	bls.n	80010c0 <HAL_ETH_Init+0x140>
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	4a69      	ldr	r2, [pc, #420]	; (8001258 <HAL_ETH_Init+0x2d8>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d804      	bhi.n	80010c0 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	f043 0304 	orr.w	r3, r3, #4
 80010bc:	61fb      	str	r3, [r7, #28]
 80010be:	e005      	b.n	80010cc <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f043 0310 	orr.w	r3, r3, #16
 80010c6:	61fb      	str	r3, [r7, #28]
 80010c8:	e000      	b.n	80010cc <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80010ca:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	69fa      	ldr	r2, [r7, #28]
 80010d2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80010d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010d8:	2100      	movs	r1, #0
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 f956 	bl	800138c <HAL_ETH_WritePHYRegister>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00b      	beq.n	80010fe <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80010ea:	6939      	ldr	r1, [r7, #16]
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 f9b3 	bl	8001458 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2201      	movs	r2, #1
 80010f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e0d9      	b.n	80012b2 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80010fe:	20ff      	movs	r0, #255	; 0xff
 8001100:	f7ff fe36 	bl	8000d70 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	f000 80a7 	beq.w	800125c <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800110e:	f7ff fe23 	bl	8000d58 <HAL_GetTick>
 8001112:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	461a      	mov	r2, r3
 800111a:	2101      	movs	r1, #1
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 f8cd 	bl	80012bc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001122:	f7ff fe19 	bl	8000d58 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001130:	4293      	cmp	r3, r2
 8001132:	d90f      	bls.n	8001154 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001138:	6939      	ldr	r1, [r7, #16]
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 f98c 	bl	8001458 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2201      	movs	r2, #1
 8001144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e0ae      	b.n	80012b2 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0da      	beq.n	8001114 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800115e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001162:	2100      	movs	r1, #0
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 f911 	bl	800138c <HAL_ETH_WritePHYRegister>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d00b      	beq.n	8001188 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001174:	6939      	ldr	r1, [r7, #16]
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 f96e 	bl	8001458 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2201      	movs	r2, #1
 8001180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001184:	2301      	movs	r3, #1
 8001186:	e094      	b.n	80012b2 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001188:	f7ff fde6 	bl	8000d58 <HAL_GetTick>
 800118c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	461a      	mov	r2, r3
 8001194:	2101      	movs	r1, #1
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f890 	bl	80012bc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800119c:	f7ff fddc 	bl	8000d58 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d90f      	bls.n	80011ce <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80011b2:	6939      	ldr	r1, [r7, #16]
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 f94f 	bl	8001458 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2201      	movs	r2, #1
 80011be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e071      	b.n	80012b2 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f003 0320 	and.w	r3, r3, #32
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0da      	beq.n	800118e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	461a      	mov	r2, r3
 80011de:	211f      	movs	r1, #31
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f000 f86b 	bl	80012bc <HAL_ETH_ReadPHYRegister>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00b      	beq.n	8001204 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80011f0:	6939      	ldr	r1, [r7, #16]
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 f930 	bl	8001458 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001200:	2301      	movs	r3, #1
 8001202:	e056      	b.n	80012b2 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f003 0310 	and.w	r3, r3, #16
 800120a:	2b00      	cmp	r3, #0
 800120c:	d004      	beq.n	8001218 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	e002      	b.n	800121e <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	e037      	b.n	80012a0 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	e032      	b.n	80012a0 <HAL_ETH_Init+0x320>
 800123a:	bf00      	nop
 800123c:	03938700 	.word	0x03938700
 8001240:	40023800 	.word	0x40023800
 8001244:	40013800 	.word	0x40013800
 8001248:	01312cff 	.word	0x01312cff
 800124c:	02160ebf 	.word	0x02160ebf
 8001250:	039386ff 	.word	0x039386ff
 8001254:	05f5e0ff 	.word	0x05f5e0ff
 8001258:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	08db      	lsrs	r3, r3, #3
 8001262:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	085b      	lsrs	r3, r3, #1
 800126a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800126c:	4313      	orrs	r3, r2
 800126e:	b29b      	uxth	r3, r3
 8001270:	461a      	mov	r2, r3
 8001272:	2100      	movs	r1, #0
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f000 f889 	bl	800138c <HAL_ETH_WritePHYRegister>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00b      	beq.n	8001298 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001284:	6939      	ldr	r1, [r7, #16]
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 f8e6 	bl	8001458 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2201      	movs	r2, #1
 8001290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e00c      	b.n	80012b2 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001298:	f640 70ff 	movw	r0, #4095	; 0xfff
 800129c:	f7ff fd68 	bl	8000d70 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80012a0:	6939      	ldr	r1, [r7, #16]
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 f8d8 	bl	8001458 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3720      	adds	r7, #32
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop

080012bc <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	460b      	mov	r3, r1
 80012c6:	607a      	str	r2, [r7, #4]
 80012c8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b82      	cmp	r3, #130	; 0x82
 80012dc:	d101      	bne.n	80012e2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80012de:	2302      	movs	r3, #2
 80012e0:	e050      	b.n	8001384 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2282      	movs	r2, #130	; 0x82
 80012e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	f003 031c 	and.w	r3, r3, #28
 80012f8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	8a1b      	ldrh	r3, [r3, #16]
 80012fe:	02db      	lsls	r3, r3, #11
 8001300:	b29b      	uxth	r3, r3
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	4313      	orrs	r3, r2
 8001306:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001308:	897b      	ldrh	r3, [r7, #10]
 800130a:	019b      	lsls	r3, r3, #6
 800130c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	4313      	orrs	r3, r2
 8001314:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	f023 0302 	bic.w	r3, r3, #2
 800131c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800132e:	f7ff fd13 	bl	8000d58 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001334:	e015      	b.n	8001362 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001336:	f7ff fd0f 	bl	8000d58 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001344:	d309      	bcc.n	800135a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e014      	b.n	8001384 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1e4      	bne.n	8001336 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	b29b      	uxth	r3, r3
 8001374:	461a      	mov	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	460b      	mov	r3, r1
 8001396:	607a      	str	r2, [r7, #4]
 8001398:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b42      	cmp	r3, #66	; 0x42
 80013ac:	d101      	bne.n	80013b2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80013ae:	2302      	movs	r3, #2
 80013b0:	e04e      	b.n	8001450 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2242      	movs	r2, #66	; 0x42
 80013b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	f003 031c 	and.w	r3, r3, #28
 80013c8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	8a1b      	ldrh	r3, [r3, #16]
 80013ce:	02db      	lsls	r3, r3, #11
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80013d8:	897b      	ldrh	r3, [r7, #10]
 80013da:	019b      	lsls	r3, r3, #6
 80013dc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001408:	f7ff fca6 	bl	8000d58 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800140e:	e015      	b.n	800143c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001410:	f7ff fca2 	bl	8000d58 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800141e:	d309      	bcc.n	8001434 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e00d      	b.n	8001450 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1e4      	bne.n	8001410 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2201      	movs	r2, #1
 800144a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b0b0      	sub	sp, #192	; 0xc0
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001462:	2300      	movs	r3, #0
 8001464:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d007      	beq.n	800147e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001474:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800147c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800147e:	2300      	movs	r3, #0
 8001480:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001486:	2300      	movs	r3, #0
 8001488:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d103      	bne.n	80014a6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800149e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a2:	663b      	str	r3, [r7, #96]	; 0x60
 80014a4:	e001      	b.n	80014aa <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80014aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ae:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80014b4:	2300      	movs	r3, #0
 80014b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80014c4:	2340      	movs	r3, #64	; 0x40
 80014c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80014da:	2300      	movs	r3, #0
 80014dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80014fe:	2300      	movs	r3, #0
 8001500:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001504:	2300      	movs	r3, #0
 8001506:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001516:	2300      	movs	r3, #0
 8001518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800151c:	2300      	movs	r3, #0
 800151e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800152c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001530:	4bac      	ldr	r3, [pc, #688]	; (80017e4 <ETH_MACDMAConfig+0x38c>)
 8001532:	4013      	ands	r3, r2
 8001534:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001538:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800153a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800153c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800153e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001540:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001544:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800154a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800154c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800154e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001552:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001558:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800155a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800155c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800155e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001560:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001562:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001564:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001568:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800156a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800156c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800156e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001572:	4313      	orrs	r3, r2
 8001574:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001580:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800158c:	2001      	movs	r0, #1
 800158e:	f7ff fbef 	bl	8000d70 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800159a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800159c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800159e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80015a0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80015a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80015a4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80015a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80015aa:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80015ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80015b0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80015b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80015b6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80015b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80015bc:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80015c0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80015c8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80015ca:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80015d6:	2001      	movs	r0, #1
 80015d8:	f7ff fbca 	bl	8000d70 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015e4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80015ee:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80015f8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001604:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001608:	f64f 7341 	movw	r3, #65345	; 0xff41
 800160c:	4013      	ands	r3, r2
 800160e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001612:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001616:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001618:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800161c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800161e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001622:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001624:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001628:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800162a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800162e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001630:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001634:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001636:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800163a:	4313      	orrs	r3, r2
 800163c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001648:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001654:	2001      	movs	r0, #1
 8001656:	f7ff fb8b 	bl	8000d70 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001662:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001664:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001668:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800167e:	2001      	movs	r0, #1
 8001680:	f7ff fb76 	bl	8000d70 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800168c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001692:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001696:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800169c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016a0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80016b2:	2304      	movs	r3, #4
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80016b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80016bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016c0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80016c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016c6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80016c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016cc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80016d6:	2300      	movs	r3, #0
 80016d8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e2:	3318      	adds	r3, #24
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80016ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016ee:	4b3e      	ldr	r3, [pc, #248]	; (80017e8 <ETH_MACDMAConfig+0x390>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80016f6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80016f8:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80016fa:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80016fc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80016fe:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001700:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001702:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001704:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001706:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001708:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800170a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800170c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800170e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001712:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001714:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001716:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001718:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800171c:	4313      	orrs	r3, r2
 800171e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800172a:	3318      	adds	r3, #24
 800172c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001730:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800173a:	3318      	adds	r3, #24
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001742:	2001      	movs	r0, #1
 8001744:	f7ff fb14 	bl	8000d70 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001750:	3318      	adds	r3, #24
 8001752:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001756:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800175a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800175c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800175e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001760:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001764:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001768:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800176a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800176c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800176e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001772:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800177c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001780:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001790:	2001      	movs	r0, #1
 8001792:	f7ff faed 	bl	8000d70 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800179e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017a2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d10f      	bne.n	80017cc <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017b4:	331c      	adds	r3, #28
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80017c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017c8:	331c      	adds	r3, #28
 80017ca:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	461a      	mov	r2, r3
 80017d2:	2100      	movs	r1, #0
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 f809 	bl	80017ec <ETH_MACAddressConfig>
}
 80017da:	bf00      	nop
 80017dc:	37c0      	adds	r7, #192	; 0xc0
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	ff20810f 	.word	0xff20810f
 80017e8:	f8de3f23 	.word	0xf8de3f23

080017ec <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b087      	sub	sp, #28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3305      	adds	r3, #5
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	021b      	lsls	r3, r3, #8
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	3204      	adds	r2, #4
 8001804:	7812      	ldrb	r2, [r2, #0]
 8001806:	4313      	orrs	r3, r2
 8001808:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	4b11      	ldr	r3, [pc, #68]	; (8001854 <ETH_MACAddressConfig+0x68>)
 800180e:	4413      	add	r3, r2
 8001810:	461a      	mov	r2, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3303      	adds	r3, #3
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	061a      	lsls	r2, r3, #24
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3302      	adds	r3, #2
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	041b      	lsls	r3, r3, #16
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3301      	adds	r3, #1
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	4313      	orrs	r3, r2
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	7812      	ldrb	r2, [r2, #0]
 8001836:	4313      	orrs	r3, r2
 8001838:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <ETH_MACAddressConfig+0x6c>)
 800183e:	4413      	add	r3, r2
 8001840:	461a      	mov	r2, r3
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	6013      	str	r3, [r2, #0]
}
 8001846:	bf00      	nop
 8001848:	371c      	adds	r7, #28
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40028040 	.word	0x40028040
 8001858:	40028044 	.word	0x40028044

0800185c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800186e:	2300      	movs	r3, #0
 8001870:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
 8001876:	e177      	b.n	8001b68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001878:	2201      	movs	r2, #1
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	429a      	cmp	r2, r3
 8001892:	f040 8166 	bne.w	8001b62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d00b      	beq.n	80018b6 <HAL_GPIO_Init+0x5a>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d007      	beq.n	80018b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018aa:	2b11      	cmp	r3, #17
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b12      	cmp	r3, #18
 80018b4:	d130      	bne.n	8001918 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	2203      	movs	r2, #3
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ec:	2201      	movs	r2, #1
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	091b      	lsrs	r3, r3, #4
 8001902:	f003 0201 	and.w	r2, r3, #1
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d003      	beq.n	8001958 <HAL_GPIO_Init+0xfc>
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b12      	cmp	r3, #18
 8001956:	d123      	bne.n	80019a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	08da      	lsrs	r2, r3, #3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3208      	adds	r2, #8
 8001960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	220f      	movs	r2, #15
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	691a      	ldr	r2, [r3, #16]
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	08da      	lsrs	r2, r3, #3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3208      	adds	r2, #8
 800199a:	69b9      	ldr	r1, [r7, #24]
 800199c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	2203      	movs	r2, #3
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0203 	and.w	r2, r3, #3
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 80c0 	beq.w	8001b62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	4b65      	ldr	r3, [pc, #404]	; (8001b7c <HAL_GPIO_Init+0x320>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	4a64      	ldr	r2, [pc, #400]	; (8001b7c <HAL_GPIO_Init+0x320>)
 80019ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f0:	6453      	str	r3, [r2, #68]	; 0x44
 80019f2:	4b62      	ldr	r3, [pc, #392]	; (8001b7c <HAL_GPIO_Init+0x320>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019fe:	4a60      	ldr	r2, [pc, #384]	; (8001b80 <HAL_GPIO_Init+0x324>)
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	089b      	lsrs	r3, r3, #2
 8001a04:	3302      	adds	r3, #2
 8001a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	220f      	movs	r2, #15
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a57      	ldr	r2, [pc, #348]	; (8001b84 <HAL_GPIO_Init+0x328>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d037      	beq.n	8001a9a <HAL_GPIO_Init+0x23e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a56      	ldr	r2, [pc, #344]	; (8001b88 <HAL_GPIO_Init+0x32c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d031      	beq.n	8001a96 <HAL_GPIO_Init+0x23a>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a55      	ldr	r2, [pc, #340]	; (8001b8c <HAL_GPIO_Init+0x330>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d02b      	beq.n	8001a92 <HAL_GPIO_Init+0x236>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a54      	ldr	r2, [pc, #336]	; (8001b90 <HAL_GPIO_Init+0x334>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d025      	beq.n	8001a8e <HAL_GPIO_Init+0x232>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a53      	ldr	r2, [pc, #332]	; (8001b94 <HAL_GPIO_Init+0x338>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d01f      	beq.n	8001a8a <HAL_GPIO_Init+0x22e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a52      	ldr	r2, [pc, #328]	; (8001b98 <HAL_GPIO_Init+0x33c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d019      	beq.n	8001a86 <HAL_GPIO_Init+0x22a>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a51      	ldr	r2, [pc, #324]	; (8001b9c <HAL_GPIO_Init+0x340>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d013      	beq.n	8001a82 <HAL_GPIO_Init+0x226>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a50      	ldr	r2, [pc, #320]	; (8001ba0 <HAL_GPIO_Init+0x344>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d00d      	beq.n	8001a7e <HAL_GPIO_Init+0x222>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4f      	ldr	r2, [pc, #316]	; (8001ba4 <HAL_GPIO_Init+0x348>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d007      	beq.n	8001a7a <HAL_GPIO_Init+0x21e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a4e      	ldr	r2, [pc, #312]	; (8001ba8 <HAL_GPIO_Init+0x34c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d101      	bne.n	8001a76 <HAL_GPIO_Init+0x21a>
 8001a72:	2309      	movs	r3, #9
 8001a74:	e012      	b.n	8001a9c <HAL_GPIO_Init+0x240>
 8001a76:	230a      	movs	r3, #10
 8001a78:	e010      	b.n	8001a9c <HAL_GPIO_Init+0x240>
 8001a7a:	2308      	movs	r3, #8
 8001a7c:	e00e      	b.n	8001a9c <HAL_GPIO_Init+0x240>
 8001a7e:	2307      	movs	r3, #7
 8001a80:	e00c      	b.n	8001a9c <HAL_GPIO_Init+0x240>
 8001a82:	2306      	movs	r3, #6
 8001a84:	e00a      	b.n	8001a9c <HAL_GPIO_Init+0x240>
 8001a86:	2305      	movs	r3, #5
 8001a88:	e008      	b.n	8001a9c <HAL_GPIO_Init+0x240>
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	e006      	b.n	8001a9c <HAL_GPIO_Init+0x240>
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e004      	b.n	8001a9c <HAL_GPIO_Init+0x240>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e002      	b.n	8001a9c <HAL_GPIO_Init+0x240>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <HAL_GPIO_Init+0x240>
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	69fa      	ldr	r2, [r7, #28]
 8001a9e:	f002 0203 	and.w	r2, r2, #3
 8001aa2:	0092      	lsls	r2, r2, #2
 8001aa4:	4093      	lsls	r3, r2
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aac:	4934      	ldr	r1, [pc, #208]	; (8001b80 <HAL_GPIO_Init+0x324>)
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	089b      	lsrs	r3, r3, #2
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aba:	4b3c      	ldr	r3, [pc, #240]	; (8001bac <HAL_GPIO_Init+0x350>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ade:	4a33      	ldr	r2, [pc, #204]	; (8001bac <HAL_GPIO_Init+0x350>)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ae4:	4b31      	ldr	r3, [pc, #196]	; (8001bac <HAL_GPIO_Init+0x350>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b08:	4a28      	ldr	r2, [pc, #160]	; (8001bac <HAL_GPIO_Init+0x350>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b0e:	4b27      	ldr	r3, [pc, #156]	; (8001bac <HAL_GPIO_Init+0x350>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b32:	4a1e      	ldr	r2, [pc, #120]	; (8001bac <HAL_GPIO_Init+0x350>)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b38:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <HAL_GPIO_Init+0x350>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b5c:	4a13      	ldr	r2, [pc, #76]	; (8001bac <HAL_GPIO_Init+0x350>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3301      	adds	r3, #1
 8001b66:	61fb      	str	r3, [r7, #28]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	2b0f      	cmp	r3, #15
 8001b6c:	f67f ae84 	bls.w	8001878 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b70:	bf00      	nop
 8001b72:	3724      	adds	r7, #36	; 0x24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40013800 	.word	0x40013800
 8001b84:	40020000 	.word	0x40020000
 8001b88:	40020400 	.word	0x40020400
 8001b8c:	40020800 	.word	0x40020800
 8001b90:	40020c00 	.word	0x40020c00
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40021400 	.word	0x40021400
 8001b9c:	40021800 	.word	0x40021800
 8001ba0:	40021c00 	.word	0x40021c00
 8001ba4:	40022000 	.word	0x40022000
 8001ba8:	40022400 	.word	0x40022400
 8001bac:	40013c00 	.word	0x40013c00

08001bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	807b      	strh	r3, [r7, #2]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bc0:	787b      	ldrb	r3, [r7, #1]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc6:	887a      	ldrh	r2, [r7, #2]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bcc:	e003      	b.n	8001bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bce:	887b      	ldrh	r3, [r7, #2]
 8001bd0:	041a      	lsls	r2, r3, #16
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	619a      	str	r2, [r3, #24]
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	460b      	mov	r3, r1
 8001bec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695a      	ldr	r2, [r3, #20]
 8001bf2:	887b      	ldrh	r3, [r7, #2]
 8001bf4:	401a      	ands	r2, r3
 8001bf6:	887b      	ldrh	r3, [r7, #2]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d104      	bne.n	8001c06 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001bfc:	887b      	ldrh	r3, [r7, #2]
 8001bfe:	041a      	lsls	r2, r3, #16
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001c04:	e002      	b.n	8001c0c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	619a      	str	r2, [r3, #24]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c1a:	b08f      	sub	sp, #60	; 0x3c
 8001c1c:	af0a      	add	r7, sp, #40	; 0x28
 8001c1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e10f      	b.n	8001e4a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d106      	bne.n	8001c4a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7fe ff59 	bl	8000afc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d102      	bne.n	8001c64 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f001 f980 	bl	8002f6e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	687e      	ldr	r6, [r7, #4]
 8001c76:	466d      	mov	r5, sp
 8001c78:	f106 0410 	add.w	r4, r6, #16
 8001c7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c88:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c8c:	1d33      	adds	r3, r6, #4
 8001c8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c90:	6838      	ldr	r0, [r7, #0]
 8001c92:	f001 f90b 	bl	8002eac <USB_CoreInit>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e0d0      	b.n	8001e4a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f001 f96e 	bl	8002f90 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	73fb      	strb	r3, [r7, #15]
 8001cb8:	e04a      	b.n	8001d50 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cba:	7bfa      	ldrb	r2, [r7, #15]
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	1a9b      	subs	r3, r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	333d      	adds	r3, #61	; 0x3d
 8001cca:	2201      	movs	r2, #1
 8001ccc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	1a9b      	subs	r3, r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	333c      	adds	r3, #60	; 0x3c
 8001cde:	7bfa      	ldrb	r2, [r7, #15]
 8001ce0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ce2:	7bfa      	ldrb	r2, [r7, #15]
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
 8001ce6:	b298      	uxth	r0, r3
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	4613      	mov	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	1a9b      	subs	r3, r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	3342      	adds	r3, #66	; 0x42
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cfa:	7bfa      	ldrb	r2, [r7, #15]
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	1a9b      	subs	r3, r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	440b      	add	r3, r1
 8001d08:	333f      	adds	r3, #63	; 0x3f
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d0e:	7bfa      	ldrb	r2, [r7, #15]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	1a9b      	subs	r3, r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	3344      	adds	r3, #68	; 0x44
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d22:	7bfa      	ldrb	r2, [r7, #15]
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	4613      	mov	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	1a9b      	subs	r3, r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	440b      	add	r3, r1
 8001d30:	3348      	adds	r3, #72	; 0x48
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	1a9b      	subs	r3, r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	440b      	add	r3, r1
 8001d44:	3350      	adds	r3, #80	; 0x50
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	73fb      	strb	r3, [r7, #15]
 8001d50:	7bfa      	ldrb	r2, [r7, #15]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d3af      	bcc.n	8001cba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	73fb      	strb	r3, [r7, #15]
 8001d5e:	e044      	b.n	8001dea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d60:	7bfa      	ldrb	r2, [r7, #15]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	1a9b      	subs	r3, r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d76:	7bfa      	ldrb	r2, [r7, #15]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	1a9b      	subs	r3, r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001d88:	7bfa      	ldrb	r2, [r7, #15]
 8001d8a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d8c:	7bfa      	ldrb	r2, [r7, #15]
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001da2:	7bfa      	ldrb	r2, [r7, #15]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	1a9b      	subs	r3, r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001db8:	7bfa      	ldrb	r2, [r7, #15]
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	1a9b      	subs	r3, r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	1a9b      	subs	r3, r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	440b      	add	r3, r1
 8001ddc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	3301      	adds	r3, #1
 8001de8:	73fb      	strb	r3, [r7, #15]
 8001dea:	7bfa      	ldrb	r2, [r7, #15]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d3b5      	bcc.n	8001d60 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	687e      	ldr	r6, [r7, #4]
 8001dfc:	466d      	mov	r5, sp
 8001dfe:	f106 0410 	add.w	r4, r6, #16
 8001e02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e12:	1d33      	adds	r3, r6, #4
 8001e14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e16:	6838      	ldr	r0, [r7, #0]
 8001e18:	f001 f8e4 	bl	8002fe4 <USB_DevInit>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d005      	beq.n	8001e2e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2202      	movs	r2, #2
 8001e26:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e00d      	b.n	8001e4a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f001 faa1 	bl	800338a <USB_DevDisconnect>

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001e54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e25b      	b.n	800231e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d075      	beq.n	8001f5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e72:	4ba3      	ldr	r3, [pc, #652]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	d00c      	beq.n	8001e98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e7e:	4ba0      	ldr	r3, [pc, #640]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d112      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e8a:	4b9d      	ldr	r3, [pc, #628]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e96:	d10b      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e98:	4b99      	ldr	r3, [pc, #612]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d05b      	beq.n	8001f5c <HAL_RCC_OscConfig+0x108>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d157      	bne.n	8001f5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e236      	b.n	800231e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb8:	d106      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x74>
 8001eba:	4b91      	ldr	r3, [pc, #580]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a90      	ldr	r2, [pc, #576]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	e01d      	b.n	8001f04 <HAL_RCC_OscConfig+0xb0>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ed0:	d10c      	bne.n	8001eec <HAL_RCC_OscConfig+0x98>
 8001ed2:	4b8b      	ldr	r3, [pc, #556]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a8a      	ldr	r2, [pc, #552]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	4b88      	ldr	r3, [pc, #544]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a87      	ldr	r2, [pc, #540]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	e00b      	b.n	8001f04 <HAL_RCC_OscConfig+0xb0>
 8001eec:	4b84      	ldr	r3, [pc, #528]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a83      	ldr	r2, [pc, #524]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	4b81      	ldr	r3, [pc, #516]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a80      	ldr	r2, [pc, #512]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d013      	beq.n	8001f34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0c:	f7fe ff24 	bl	8000d58 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f14:	f7fe ff20 	bl	8000d58 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b64      	cmp	r3, #100	; 0x64
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e1fb      	b.n	800231e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f26:	4b76      	ldr	r3, [pc, #472]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCC_OscConfig+0xc0>
 8001f32:	e014      	b.n	8001f5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7fe ff10 	bl	8000d58 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f3c:	f7fe ff0c 	bl	8000d58 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b64      	cmp	r3, #100	; 0x64
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e1e7      	b.n	800231e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4e:	4b6c      	ldr	r3, [pc, #432]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f0      	bne.n	8001f3c <HAL_RCC_OscConfig+0xe8>
 8001f5a:	e000      	b.n	8001f5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d063      	beq.n	8002032 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f6a:	4b65      	ldr	r3, [pc, #404]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00b      	beq.n	8001f8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f76:	4b62      	ldr	r3, [pc, #392]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d11c      	bne.n	8001fbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f82:	4b5f      	ldr	r3, [pc, #380]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d116      	bne.n	8001fbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8e:	4b5c      	ldr	r3, [pc, #368]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d005      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x152>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d001      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e1bb      	b.n	800231e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa6:	4b56      	ldr	r3, [pc, #344]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4952      	ldr	r1, [pc, #328]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fba:	e03a      	b.n	8002032 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d020      	beq.n	8002006 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc4:	4b4f      	ldr	r3, [pc, #316]	; (8002104 <HAL_RCC_OscConfig+0x2b0>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fca:	f7fe fec5 	bl	8000d58 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd2:	f7fe fec1 	bl	8000d58 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e19c      	b.n	800231e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe4:	4b46      	ldr	r3, [pc, #280]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0f0      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff0:	4b43      	ldr	r3, [pc, #268]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4940      	ldr	r1, [pc, #256]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8002000:	4313      	orrs	r3, r2
 8002002:	600b      	str	r3, [r1, #0]
 8002004:	e015      	b.n	8002032 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002006:	4b3f      	ldr	r3, [pc, #252]	; (8002104 <HAL_RCC_OscConfig+0x2b0>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200c:	f7fe fea4 	bl	8000d58 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002014:	f7fe fea0 	bl	8000d58 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e17b      	b.n	800231e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002026:	4b36      	ldr	r3, [pc, #216]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d030      	beq.n	80020a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d016      	beq.n	8002074 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002046:	4b30      	ldr	r3, [pc, #192]	; (8002108 <HAL_RCC_OscConfig+0x2b4>)
 8002048:	2201      	movs	r2, #1
 800204a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204c:	f7fe fe84 	bl	8000d58 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002054:	f7fe fe80 	bl	8000d58 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e15b      	b.n	800231e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002066:	4b26      	ldr	r3, [pc, #152]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8002068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0x200>
 8002072:	e015      	b.n	80020a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002074:	4b24      	ldr	r3, [pc, #144]	; (8002108 <HAL_RCC_OscConfig+0x2b4>)
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207a:	f7fe fe6d 	bl	8000d58 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002082:	f7fe fe69 	bl	8000d58 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e144      	b.n	800231e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002094:	4b1a      	ldr	r3, [pc, #104]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8002096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1f0      	bne.n	8002082 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 80a0 	beq.w	80021ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ae:	2300      	movs	r3, #0
 80020b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b2:	4b13      	ldr	r3, [pc, #76]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10f      	bne.n	80020de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	4a0e      	ldr	r2, [pc, #56]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 80020c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020cc:	6413      	str	r3, [r2, #64]	; 0x40
 80020ce:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020da:	2301      	movs	r3, #1
 80020dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020de:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_RCC_OscConfig+0x2b8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d121      	bne.n	800212e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ea:	4b08      	ldr	r3, [pc, #32]	; (800210c <HAL_RCC_OscConfig+0x2b8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a07      	ldr	r2, [pc, #28]	; (800210c <HAL_RCC_OscConfig+0x2b8>)
 80020f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020f6:	f7fe fe2f 	bl	8000d58 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fc:	e011      	b.n	8002122 <HAL_RCC_OscConfig+0x2ce>
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800
 8002104:	42470000 	.word	0x42470000
 8002108:	42470e80 	.word	0x42470e80
 800210c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002110:	f7fe fe22 	bl	8000d58 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e0fd      	b.n	800231e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002122:	4b81      	ldr	r3, [pc, #516]	; (8002328 <HAL_RCC_OscConfig+0x4d4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d106      	bne.n	8002144 <HAL_RCC_OscConfig+0x2f0>
 8002136:	4b7d      	ldr	r3, [pc, #500]	; (800232c <HAL_RCC_OscConfig+0x4d8>)
 8002138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213a:	4a7c      	ldr	r2, [pc, #496]	; (800232c <HAL_RCC_OscConfig+0x4d8>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	6713      	str	r3, [r2, #112]	; 0x70
 8002142:	e01c      	b.n	800217e <HAL_RCC_OscConfig+0x32a>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b05      	cmp	r3, #5
 800214a:	d10c      	bne.n	8002166 <HAL_RCC_OscConfig+0x312>
 800214c:	4b77      	ldr	r3, [pc, #476]	; (800232c <HAL_RCC_OscConfig+0x4d8>)
 800214e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002150:	4a76      	ldr	r2, [pc, #472]	; (800232c <HAL_RCC_OscConfig+0x4d8>)
 8002152:	f043 0304 	orr.w	r3, r3, #4
 8002156:	6713      	str	r3, [r2, #112]	; 0x70
 8002158:	4b74      	ldr	r3, [pc, #464]	; (800232c <HAL_RCC_OscConfig+0x4d8>)
 800215a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215c:	4a73      	ldr	r2, [pc, #460]	; (800232c <HAL_RCC_OscConfig+0x4d8>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	6713      	str	r3, [r2, #112]	; 0x70
 8002164:	e00b      	b.n	800217e <HAL_RCC_OscConfig+0x32a>
 8002166:	4b71      	ldr	r3, [pc, #452]	; (800232c <HAL_RCC_OscConfig+0x4d8>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216a:	4a70      	ldr	r2, [pc, #448]	; (800232c <HAL_RCC_OscConfig+0x4d8>)
 800216c:	f023 0301 	bic.w	r3, r3, #1
 8002170:	6713      	str	r3, [r2, #112]	; 0x70
 8002172:	4b6e      	ldr	r3, [pc, #440]	; (800232c <HAL_RCC_OscConfig+0x4d8>)
 8002174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002176:	4a6d      	ldr	r2, [pc, #436]	; (800232c <HAL_RCC_OscConfig+0x4d8>)
 8002178:	f023 0304 	bic.w	r3, r3, #4
 800217c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d015      	beq.n	80021b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002186:	f7fe fde7 	bl	8000d58 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218c:	e00a      	b.n	80021a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800218e:	f7fe fde3 	bl	8000d58 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	f241 3288 	movw	r2, #5000	; 0x1388
 800219c:	4293      	cmp	r3, r2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e0bc      	b.n	800231e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a4:	4b61      	ldr	r3, [pc, #388]	; (800232c <HAL_RCC_OscConfig+0x4d8>)
 80021a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0ee      	beq.n	800218e <HAL_RCC_OscConfig+0x33a>
 80021b0:	e014      	b.n	80021dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b2:	f7fe fdd1 	bl	8000d58 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b8:	e00a      	b.n	80021d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ba:	f7fe fdcd 	bl	8000d58 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e0a6      	b.n	800231e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d0:	4b56      	ldr	r3, [pc, #344]	; (800232c <HAL_RCC_OscConfig+0x4d8>)
 80021d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1ee      	bne.n	80021ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021dc:	7dfb      	ldrb	r3, [r7, #23]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d105      	bne.n	80021ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e2:	4b52      	ldr	r3, [pc, #328]	; (800232c <HAL_RCC_OscConfig+0x4d8>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a51      	ldr	r2, [pc, #324]	; (800232c <HAL_RCC_OscConfig+0x4d8>)
 80021e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 8092 	beq.w	800231c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021f8:	4b4c      	ldr	r3, [pc, #304]	; (800232c <HAL_RCC_OscConfig+0x4d8>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 030c 	and.w	r3, r3, #12
 8002200:	2b08      	cmp	r3, #8
 8002202:	d05c      	beq.n	80022be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d141      	bne.n	8002290 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220c:	4b48      	ldr	r3, [pc, #288]	; (8002330 <HAL_RCC_OscConfig+0x4dc>)
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002212:	f7fe fda1 	bl	8000d58 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800221a:	f7fe fd9d 	bl	8000d58 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e078      	b.n	800231e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800222c:	4b3f      	ldr	r3, [pc, #252]	; (800232c <HAL_RCC_OscConfig+0x4d8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f0      	bne.n	800221a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69da      	ldr	r2, [r3, #28]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	019b      	lsls	r3, r3, #6
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224e:	085b      	lsrs	r3, r3, #1
 8002250:	3b01      	subs	r3, #1
 8002252:	041b      	lsls	r3, r3, #16
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225a:	061b      	lsls	r3, r3, #24
 800225c:	4933      	ldr	r1, [pc, #204]	; (800232c <HAL_RCC_OscConfig+0x4d8>)
 800225e:	4313      	orrs	r3, r2
 8002260:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002262:	4b33      	ldr	r3, [pc, #204]	; (8002330 <HAL_RCC_OscConfig+0x4dc>)
 8002264:	2201      	movs	r2, #1
 8002266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002268:	f7fe fd76 	bl	8000d58 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002270:	f7fe fd72 	bl	8000d58 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e04d      	b.n	800231e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002282:	4b2a      	ldr	r3, [pc, #168]	; (800232c <HAL_RCC_OscConfig+0x4d8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0x41c>
 800228e:	e045      	b.n	800231c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002290:	4b27      	ldr	r3, [pc, #156]	; (8002330 <HAL_RCC_OscConfig+0x4dc>)
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7fe fd5f 	bl	8000d58 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800229e:	f7fe fd5b 	bl	8000d58 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e036      	b.n	800231e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b0:	4b1e      	ldr	r3, [pc, #120]	; (800232c <HAL_RCC_OscConfig+0x4d8>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1f0      	bne.n	800229e <HAL_RCC_OscConfig+0x44a>
 80022bc:	e02e      	b.n	800231c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e029      	b.n	800231e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022ca:	4b18      	ldr	r3, [pc, #96]	; (800232c <HAL_RCC_OscConfig+0x4d8>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d11c      	bne.n	8002318 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d115      	bne.n	8002318 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022f2:	4013      	ands	r3, r2
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d10d      	bne.n	8002318 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002306:	429a      	cmp	r2, r3
 8002308:	d106      	bne.n	8002318 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002314:	429a      	cmp	r2, r3
 8002316:	d001      	beq.n	800231c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e000      	b.n	800231e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40007000 	.word	0x40007000
 800232c:	40023800 	.word	0x40023800
 8002330:	42470060 	.word	0x42470060

08002334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0cc      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002348:	4b68      	ldr	r3, [pc, #416]	; (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 030f 	and.w	r3, r3, #15
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d90c      	bls.n	8002370 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002356:	4b65      	ldr	r3, [pc, #404]	; (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235e:	4b63      	ldr	r3, [pc, #396]	; (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0b8      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d020      	beq.n	80023be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002388:	4b59      	ldr	r3, [pc, #356]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	4a58      	ldr	r2, [pc, #352]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002392:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0308 	and.w	r3, r3, #8
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023a0:	4b53      	ldr	r3, [pc, #332]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	4a52      	ldr	r2, [pc, #328]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ac:	4b50      	ldr	r3, [pc, #320]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	494d      	ldr	r1, [pc, #308]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d044      	beq.n	8002454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d107      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d2:	4b47      	ldr	r3, [pc, #284]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d119      	bne.n	8002412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e07f      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d003      	beq.n	80023f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d107      	bne.n	8002402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f2:	4b3f      	ldr	r3, [pc, #252]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e06f      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002402:	4b3b      	ldr	r3, [pc, #236]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e067      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002412:	4b37      	ldr	r3, [pc, #220]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f023 0203 	bic.w	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4934      	ldr	r1, [pc, #208]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002420:	4313      	orrs	r3, r2
 8002422:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002424:	f7fe fc98 	bl	8000d58 <HAL_GetTick>
 8002428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242a:	e00a      	b.n	8002442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800242c:	f7fe fc94 	bl	8000d58 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	f241 3288 	movw	r2, #5000	; 0x1388
 800243a:	4293      	cmp	r3, r2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e04f      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002442:	4b2b      	ldr	r3, [pc, #172]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 020c 	and.w	r2, r3, #12
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	429a      	cmp	r2, r3
 8002452:	d1eb      	bne.n	800242c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002454:	4b25      	ldr	r3, [pc, #148]	; (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 030f 	and.w	r3, r3, #15
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d20c      	bcs.n	800247c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b22      	ldr	r3, [pc, #136]	; (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800246a:	4b20      	ldr	r3, [pc, #128]	; (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d001      	beq.n	800247c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e032      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002488:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4916      	ldr	r1, [pc, #88]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	4313      	orrs	r3, r2
 8002498:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d009      	beq.n	80024ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024a6:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	490e      	ldr	r1, [pc, #56]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024ba:	f000 f821 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 80024be:	4601      	mov	r1, r0
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	091b      	lsrs	r3, r3, #4
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	4a0a      	ldr	r2, [pc, #40]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 80024cc:	5cd3      	ldrb	r3, [r2, r3]
 80024ce:	fa21 f303 	lsr.w	r3, r1, r3
 80024d2:	4a09      	ldr	r2, [pc, #36]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024d6:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe fbf8 	bl	8000cd0 <HAL_InitTick>

  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40023c00 	.word	0x40023c00
 80024f0:	40023800 	.word	0x40023800
 80024f4:	08003494 	.word	0x08003494
 80024f8:	20000000 	.word	0x20000000
 80024fc:	20000004 	.word	0x20000004

08002500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	607b      	str	r3, [r7, #4]
 800250a:	2300      	movs	r3, #0
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	2300      	movs	r3, #0
 8002510:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002512:	2300      	movs	r3, #0
 8002514:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002516:	4b63      	ldr	r3, [pc, #396]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	2b04      	cmp	r3, #4
 8002520:	d007      	beq.n	8002532 <HAL_RCC_GetSysClockFreq+0x32>
 8002522:	2b08      	cmp	r3, #8
 8002524:	d008      	beq.n	8002538 <HAL_RCC_GetSysClockFreq+0x38>
 8002526:	2b00      	cmp	r3, #0
 8002528:	f040 80b4 	bne.w	8002694 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800252c:	4b5e      	ldr	r3, [pc, #376]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800252e:	60bb      	str	r3, [r7, #8]
       break;
 8002530:	e0b3      	b.n	800269a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002532:	4b5e      	ldr	r3, [pc, #376]	; (80026ac <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002534:	60bb      	str	r3, [r7, #8]
      break;
 8002536:	e0b0      	b.n	800269a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002538:	4b5a      	ldr	r3, [pc, #360]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002540:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002542:	4b58      	ldr	r3, [pc, #352]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d04a      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800254e:	4b55      	ldr	r3, [pc, #340]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	099b      	lsrs	r3, r3, #6
 8002554:	f04f 0400 	mov.w	r4, #0
 8002558:	f240 11ff 	movw	r1, #511	; 0x1ff
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	ea03 0501 	and.w	r5, r3, r1
 8002564:	ea04 0602 	and.w	r6, r4, r2
 8002568:	4629      	mov	r1, r5
 800256a:	4632      	mov	r2, r6
 800256c:	f04f 0300 	mov.w	r3, #0
 8002570:	f04f 0400 	mov.w	r4, #0
 8002574:	0154      	lsls	r4, r2, #5
 8002576:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800257a:	014b      	lsls	r3, r1, #5
 800257c:	4619      	mov	r1, r3
 800257e:	4622      	mov	r2, r4
 8002580:	1b49      	subs	r1, r1, r5
 8002582:	eb62 0206 	sbc.w	r2, r2, r6
 8002586:	f04f 0300 	mov.w	r3, #0
 800258a:	f04f 0400 	mov.w	r4, #0
 800258e:	0194      	lsls	r4, r2, #6
 8002590:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002594:	018b      	lsls	r3, r1, #6
 8002596:	1a5b      	subs	r3, r3, r1
 8002598:	eb64 0402 	sbc.w	r4, r4, r2
 800259c:	f04f 0100 	mov.w	r1, #0
 80025a0:	f04f 0200 	mov.w	r2, #0
 80025a4:	00e2      	lsls	r2, r4, #3
 80025a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80025aa:	00d9      	lsls	r1, r3, #3
 80025ac:	460b      	mov	r3, r1
 80025ae:	4614      	mov	r4, r2
 80025b0:	195b      	adds	r3, r3, r5
 80025b2:	eb44 0406 	adc.w	r4, r4, r6
 80025b6:	f04f 0100 	mov.w	r1, #0
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	0262      	lsls	r2, r4, #9
 80025c0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80025c4:	0259      	lsls	r1, r3, #9
 80025c6:	460b      	mov	r3, r1
 80025c8:	4614      	mov	r4, r2
 80025ca:	4618      	mov	r0, r3
 80025cc:	4621      	mov	r1, r4
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f04f 0400 	mov.w	r4, #0
 80025d4:	461a      	mov	r2, r3
 80025d6:	4623      	mov	r3, r4
 80025d8:	f7fd fe08 	bl	80001ec <__aeabi_uldivmod>
 80025dc:	4603      	mov	r3, r0
 80025de:	460c      	mov	r4, r1
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	e049      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025e4:	4b2f      	ldr	r3, [pc, #188]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	099b      	lsrs	r3, r3, #6
 80025ea:	f04f 0400 	mov.w	r4, #0
 80025ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	ea03 0501 	and.w	r5, r3, r1
 80025fa:	ea04 0602 	and.w	r6, r4, r2
 80025fe:	4629      	mov	r1, r5
 8002600:	4632      	mov	r2, r6
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	f04f 0400 	mov.w	r4, #0
 800260a:	0154      	lsls	r4, r2, #5
 800260c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002610:	014b      	lsls	r3, r1, #5
 8002612:	4619      	mov	r1, r3
 8002614:	4622      	mov	r2, r4
 8002616:	1b49      	subs	r1, r1, r5
 8002618:	eb62 0206 	sbc.w	r2, r2, r6
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	f04f 0400 	mov.w	r4, #0
 8002624:	0194      	lsls	r4, r2, #6
 8002626:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800262a:	018b      	lsls	r3, r1, #6
 800262c:	1a5b      	subs	r3, r3, r1
 800262e:	eb64 0402 	sbc.w	r4, r4, r2
 8002632:	f04f 0100 	mov.w	r1, #0
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	00e2      	lsls	r2, r4, #3
 800263c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002640:	00d9      	lsls	r1, r3, #3
 8002642:	460b      	mov	r3, r1
 8002644:	4614      	mov	r4, r2
 8002646:	195b      	adds	r3, r3, r5
 8002648:	eb44 0406 	adc.w	r4, r4, r6
 800264c:	f04f 0100 	mov.w	r1, #0
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	02a2      	lsls	r2, r4, #10
 8002656:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800265a:	0299      	lsls	r1, r3, #10
 800265c:	460b      	mov	r3, r1
 800265e:	4614      	mov	r4, r2
 8002660:	4618      	mov	r0, r3
 8002662:	4621      	mov	r1, r4
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f04f 0400 	mov.w	r4, #0
 800266a:	461a      	mov	r2, r3
 800266c:	4623      	mov	r3, r4
 800266e:	f7fd fdbd 	bl	80001ec <__aeabi_uldivmod>
 8002672:	4603      	mov	r3, r0
 8002674:	460c      	mov	r4, r1
 8002676:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002678:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	0c1b      	lsrs	r3, r3, #16
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	3301      	adds	r3, #1
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002690:	60bb      	str	r3, [r7, #8]
      break;
 8002692:	e002      	b.n	800269a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002694:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002696:	60bb      	str	r3, [r7, #8]
      break;
 8002698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800269a:	68bb      	ldr	r3, [r7, #8]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026a4:	40023800 	.word	0x40023800
 80026a8:	00f42400 	.word	0x00f42400
 80026ac:	007a1200 	.word	0x007a1200

080026b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b4:	4b03      	ldr	r3, [pc, #12]	; (80026c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026b6:	681b      	ldr	r3, [r3, #0]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	20000000 	.word	0x20000000

080026c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026cc:	f7ff fff0 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 80026d0:	4601      	mov	r1, r0
 80026d2:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	0a9b      	lsrs	r3, r3, #10
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	4a03      	ldr	r2, [pc, #12]	; (80026ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80026de:	5cd3      	ldrb	r3, [r2, r3]
 80026e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40023800 	.word	0x40023800
 80026ec:	080034a4 	.word	0x080034a4

080026f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026f4:	f7ff ffdc 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 80026f8:	4601      	mov	r1, r0
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	0b5b      	lsrs	r3, r3, #13
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	4a03      	ldr	r2, [pc, #12]	; (8002714 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002706:	5cd3      	ldrb	r3, [r2, r3]
 8002708:	fa21 f303 	lsr.w	r3, r1, r3
}
 800270c:	4618      	mov	r0, r3
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40023800 	.word	0x40023800
 8002714:	080034a4 	.word	0x080034a4

08002718 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e03f      	b.n	80027aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d106      	bne.n	8002744 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7fe f994 	bl	8000a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2224      	movs	r2, #36	; 0x24
 8002748:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800275a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 f829 	bl	80027b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002770:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695a      	ldr	r2, [r3, #20]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002780:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002790:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2220      	movs	r2, #32
 800279c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2220      	movs	r2, #32
 80027a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027b8:	b085      	sub	sp, #20
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80027f6:	f023 030c 	bic.w	r3, r3, #12
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6812      	ldr	r2, [r2, #0]
 80027fe:	68f9      	ldr	r1, [r7, #12]
 8002800:	430b      	orrs	r3, r1
 8002802:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699a      	ldr	r2, [r3, #24]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002822:	f040 818b 	bne.w	8002b3c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4ac1      	ldr	r2, [pc, #772]	; (8002b30 <UART_SetConfig+0x37c>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d005      	beq.n	800283c <UART_SetConfig+0x88>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4abf      	ldr	r2, [pc, #764]	; (8002b34 <UART_SetConfig+0x380>)
 8002836:	4293      	cmp	r3, r2
 8002838:	f040 80bd 	bne.w	80029b6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800283c:	f7ff ff58 	bl	80026f0 <HAL_RCC_GetPCLK2Freq>
 8002840:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	461d      	mov	r5, r3
 8002846:	f04f 0600 	mov.w	r6, #0
 800284a:	46a8      	mov	r8, r5
 800284c:	46b1      	mov	r9, r6
 800284e:	eb18 0308 	adds.w	r3, r8, r8
 8002852:	eb49 0409 	adc.w	r4, r9, r9
 8002856:	4698      	mov	r8, r3
 8002858:	46a1      	mov	r9, r4
 800285a:	eb18 0805 	adds.w	r8, r8, r5
 800285e:	eb49 0906 	adc.w	r9, r9, r6
 8002862:	f04f 0100 	mov.w	r1, #0
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800286e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002872:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002876:	4688      	mov	r8, r1
 8002878:	4691      	mov	r9, r2
 800287a:	eb18 0005 	adds.w	r0, r8, r5
 800287e:	eb49 0106 	adc.w	r1, r9, r6
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	461d      	mov	r5, r3
 8002888:	f04f 0600 	mov.w	r6, #0
 800288c:	196b      	adds	r3, r5, r5
 800288e:	eb46 0406 	adc.w	r4, r6, r6
 8002892:	461a      	mov	r2, r3
 8002894:	4623      	mov	r3, r4
 8002896:	f7fd fca9 	bl	80001ec <__aeabi_uldivmod>
 800289a:	4603      	mov	r3, r0
 800289c:	460c      	mov	r4, r1
 800289e:	461a      	mov	r2, r3
 80028a0:	4ba5      	ldr	r3, [pc, #660]	; (8002b38 <UART_SetConfig+0x384>)
 80028a2:	fba3 2302 	umull	r2, r3, r3, r2
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	461d      	mov	r5, r3
 80028b0:	f04f 0600 	mov.w	r6, #0
 80028b4:	46a9      	mov	r9, r5
 80028b6:	46b2      	mov	sl, r6
 80028b8:	eb19 0309 	adds.w	r3, r9, r9
 80028bc:	eb4a 040a 	adc.w	r4, sl, sl
 80028c0:	4699      	mov	r9, r3
 80028c2:	46a2      	mov	sl, r4
 80028c4:	eb19 0905 	adds.w	r9, r9, r5
 80028c8:	eb4a 0a06 	adc.w	sl, sl, r6
 80028cc:	f04f 0100 	mov.w	r1, #0
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028e0:	4689      	mov	r9, r1
 80028e2:	4692      	mov	sl, r2
 80028e4:	eb19 0005 	adds.w	r0, r9, r5
 80028e8:	eb4a 0106 	adc.w	r1, sl, r6
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	461d      	mov	r5, r3
 80028f2:	f04f 0600 	mov.w	r6, #0
 80028f6:	196b      	adds	r3, r5, r5
 80028f8:	eb46 0406 	adc.w	r4, r6, r6
 80028fc:	461a      	mov	r2, r3
 80028fe:	4623      	mov	r3, r4
 8002900:	f7fd fc74 	bl	80001ec <__aeabi_uldivmod>
 8002904:	4603      	mov	r3, r0
 8002906:	460c      	mov	r4, r1
 8002908:	461a      	mov	r2, r3
 800290a:	4b8b      	ldr	r3, [pc, #556]	; (8002b38 <UART_SetConfig+0x384>)
 800290c:	fba3 1302 	umull	r1, r3, r3, r2
 8002910:	095b      	lsrs	r3, r3, #5
 8002912:	2164      	movs	r1, #100	; 0x64
 8002914:	fb01 f303 	mul.w	r3, r1, r3
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	3332      	adds	r3, #50	; 0x32
 800291e:	4a86      	ldr	r2, [pc, #536]	; (8002b38 <UART_SetConfig+0x384>)
 8002920:	fba2 2303 	umull	r2, r3, r2, r3
 8002924:	095b      	lsrs	r3, r3, #5
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800292c:	4498      	add	r8, r3
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	461d      	mov	r5, r3
 8002932:	f04f 0600 	mov.w	r6, #0
 8002936:	46a9      	mov	r9, r5
 8002938:	46b2      	mov	sl, r6
 800293a:	eb19 0309 	adds.w	r3, r9, r9
 800293e:	eb4a 040a 	adc.w	r4, sl, sl
 8002942:	4699      	mov	r9, r3
 8002944:	46a2      	mov	sl, r4
 8002946:	eb19 0905 	adds.w	r9, r9, r5
 800294a:	eb4a 0a06 	adc.w	sl, sl, r6
 800294e:	f04f 0100 	mov.w	r1, #0
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800295a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800295e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002962:	4689      	mov	r9, r1
 8002964:	4692      	mov	sl, r2
 8002966:	eb19 0005 	adds.w	r0, r9, r5
 800296a:	eb4a 0106 	adc.w	r1, sl, r6
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	461d      	mov	r5, r3
 8002974:	f04f 0600 	mov.w	r6, #0
 8002978:	196b      	adds	r3, r5, r5
 800297a:	eb46 0406 	adc.w	r4, r6, r6
 800297e:	461a      	mov	r2, r3
 8002980:	4623      	mov	r3, r4
 8002982:	f7fd fc33 	bl	80001ec <__aeabi_uldivmod>
 8002986:	4603      	mov	r3, r0
 8002988:	460c      	mov	r4, r1
 800298a:	461a      	mov	r2, r3
 800298c:	4b6a      	ldr	r3, [pc, #424]	; (8002b38 <UART_SetConfig+0x384>)
 800298e:	fba3 1302 	umull	r1, r3, r3, r2
 8002992:	095b      	lsrs	r3, r3, #5
 8002994:	2164      	movs	r1, #100	; 0x64
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	3332      	adds	r3, #50	; 0x32
 80029a0:	4a65      	ldr	r2, [pc, #404]	; (8002b38 <UART_SetConfig+0x384>)
 80029a2:	fba2 2303 	umull	r2, r3, r2, r3
 80029a6:	095b      	lsrs	r3, r3, #5
 80029a8:	f003 0207 	and.w	r2, r3, #7
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4442      	add	r2, r8
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	e26f      	b.n	8002e96 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029b6:	f7ff fe87 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 80029ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	461d      	mov	r5, r3
 80029c0:	f04f 0600 	mov.w	r6, #0
 80029c4:	46a8      	mov	r8, r5
 80029c6:	46b1      	mov	r9, r6
 80029c8:	eb18 0308 	adds.w	r3, r8, r8
 80029cc:	eb49 0409 	adc.w	r4, r9, r9
 80029d0:	4698      	mov	r8, r3
 80029d2:	46a1      	mov	r9, r4
 80029d4:	eb18 0805 	adds.w	r8, r8, r5
 80029d8:	eb49 0906 	adc.w	r9, r9, r6
 80029dc:	f04f 0100 	mov.w	r1, #0
 80029e0:	f04f 0200 	mov.w	r2, #0
 80029e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80029e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80029ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80029f0:	4688      	mov	r8, r1
 80029f2:	4691      	mov	r9, r2
 80029f4:	eb18 0005 	adds.w	r0, r8, r5
 80029f8:	eb49 0106 	adc.w	r1, r9, r6
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	461d      	mov	r5, r3
 8002a02:	f04f 0600 	mov.w	r6, #0
 8002a06:	196b      	adds	r3, r5, r5
 8002a08:	eb46 0406 	adc.w	r4, r6, r6
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4623      	mov	r3, r4
 8002a10:	f7fd fbec 	bl	80001ec <__aeabi_uldivmod>
 8002a14:	4603      	mov	r3, r0
 8002a16:	460c      	mov	r4, r1
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4b47      	ldr	r3, [pc, #284]	; (8002b38 <UART_SetConfig+0x384>)
 8002a1c:	fba3 2302 	umull	r2, r3, r3, r2
 8002a20:	095b      	lsrs	r3, r3, #5
 8002a22:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	461d      	mov	r5, r3
 8002a2a:	f04f 0600 	mov.w	r6, #0
 8002a2e:	46a9      	mov	r9, r5
 8002a30:	46b2      	mov	sl, r6
 8002a32:	eb19 0309 	adds.w	r3, r9, r9
 8002a36:	eb4a 040a 	adc.w	r4, sl, sl
 8002a3a:	4699      	mov	r9, r3
 8002a3c:	46a2      	mov	sl, r4
 8002a3e:	eb19 0905 	adds.w	r9, r9, r5
 8002a42:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a46:	f04f 0100 	mov.w	r1, #0
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a5a:	4689      	mov	r9, r1
 8002a5c:	4692      	mov	sl, r2
 8002a5e:	eb19 0005 	adds.w	r0, r9, r5
 8002a62:	eb4a 0106 	adc.w	r1, sl, r6
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	461d      	mov	r5, r3
 8002a6c:	f04f 0600 	mov.w	r6, #0
 8002a70:	196b      	adds	r3, r5, r5
 8002a72:	eb46 0406 	adc.w	r4, r6, r6
 8002a76:	461a      	mov	r2, r3
 8002a78:	4623      	mov	r3, r4
 8002a7a:	f7fd fbb7 	bl	80001ec <__aeabi_uldivmod>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	460c      	mov	r4, r1
 8002a82:	461a      	mov	r2, r3
 8002a84:	4b2c      	ldr	r3, [pc, #176]	; (8002b38 <UART_SetConfig+0x384>)
 8002a86:	fba3 1302 	umull	r1, r3, r3, r2
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	2164      	movs	r1, #100	; 0x64
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	3332      	adds	r3, #50	; 0x32
 8002a98:	4a27      	ldr	r2, [pc, #156]	; (8002b38 <UART_SetConfig+0x384>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002aa6:	4498      	add	r8, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	461d      	mov	r5, r3
 8002aac:	f04f 0600 	mov.w	r6, #0
 8002ab0:	46a9      	mov	r9, r5
 8002ab2:	46b2      	mov	sl, r6
 8002ab4:	eb19 0309 	adds.w	r3, r9, r9
 8002ab8:	eb4a 040a 	adc.w	r4, sl, sl
 8002abc:	4699      	mov	r9, r3
 8002abe:	46a2      	mov	sl, r4
 8002ac0:	eb19 0905 	adds.w	r9, r9, r5
 8002ac4:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ac8:	f04f 0100 	mov.w	r1, #0
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ad4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ad8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002adc:	4689      	mov	r9, r1
 8002ade:	4692      	mov	sl, r2
 8002ae0:	eb19 0005 	adds.w	r0, r9, r5
 8002ae4:	eb4a 0106 	adc.w	r1, sl, r6
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	461d      	mov	r5, r3
 8002aee:	f04f 0600 	mov.w	r6, #0
 8002af2:	196b      	adds	r3, r5, r5
 8002af4:	eb46 0406 	adc.w	r4, r6, r6
 8002af8:	461a      	mov	r2, r3
 8002afa:	4623      	mov	r3, r4
 8002afc:	f7fd fb76 	bl	80001ec <__aeabi_uldivmod>
 8002b00:	4603      	mov	r3, r0
 8002b02:	460c      	mov	r4, r1
 8002b04:	461a      	mov	r2, r3
 8002b06:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <UART_SetConfig+0x384>)
 8002b08:	fba3 1302 	umull	r1, r3, r3, r2
 8002b0c:	095b      	lsrs	r3, r3, #5
 8002b0e:	2164      	movs	r1, #100	; 0x64
 8002b10:	fb01 f303 	mul.w	r3, r1, r3
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	3332      	adds	r3, #50	; 0x32
 8002b1a:	4a07      	ldr	r2, [pc, #28]	; (8002b38 <UART_SetConfig+0x384>)
 8002b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b20:	095b      	lsrs	r3, r3, #5
 8002b22:	f003 0207 	and.w	r2, r3, #7
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4442      	add	r2, r8
 8002b2c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002b2e:	e1b2      	b.n	8002e96 <UART_SetConfig+0x6e2>
 8002b30:	40011000 	.word	0x40011000
 8002b34:	40011400 	.word	0x40011400
 8002b38:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4ad7      	ldr	r2, [pc, #860]	; (8002ea0 <UART_SetConfig+0x6ec>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d005      	beq.n	8002b52 <UART_SetConfig+0x39e>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4ad6      	ldr	r2, [pc, #856]	; (8002ea4 <UART_SetConfig+0x6f0>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	f040 80d1 	bne.w	8002cf4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b52:	f7ff fdcd 	bl	80026f0 <HAL_RCC_GetPCLK2Freq>
 8002b56:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	469a      	mov	sl, r3
 8002b5c:	f04f 0b00 	mov.w	fp, #0
 8002b60:	46d0      	mov	r8, sl
 8002b62:	46d9      	mov	r9, fp
 8002b64:	eb18 0308 	adds.w	r3, r8, r8
 8002b68:	eb49 0409 	adc.w	r4, r9, r9
 8002b6c:	4698      	mov	r8, r3
 8002b6e:	46a1      	mov	r9, r4
 8002b70:	eb18 080a 	adds.w	r8, r8, sl
 8002b74:	eb49 090b 	adc.w	r9, r9, fp
 8002b78:	f04f 0100 	mov.w	r1, #0
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b84:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b88:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b8c:	4688      	mov	r8, r1
 8002b8e:	4691      	mov	r9, r2
 8002b90:	eb1a 0508 	adds.w	r5, sl, r8
 8002b94:	eb4b 0609 	adc.w	r6, fp, r9
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	f04f 0400 	mov.w	r4, #0
 8002baa:	0094      	lsls	r4, r2, #2
 8002bac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002bb0:	008b      	lsls	r3, r1, #2
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	4623      	mov	r3, r4
 8002bb6:	4628      	mov	r0, r5
 8002bb8:	4631      	mov	r1, r6
 8002bba:	f7fd fb17 	bl	80001ec <__aeabi_uldivmod>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	460c      	mov	r4, r1
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4bb8      	ldr	r3, [pc, #736]	; (8002ea8 <UART_SetConfig+0x6f4>)
 8002bc6:	fba3 2302 	umull	r2, r3, r3, r2
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	469b      	mov	fp, r3
 8002bd4:	f04f 0c00 	mov.w	ip, #0
 8002bd8:	46d9      	mov	r9, fp
 8002bda:	46e2      	mov	sl, ip
 8002bdc:	eb19 0309 	adds.w	r3, r9, r9
 8002be0:	eb4a 040a 	adc.w	r4, sl, sl
 8002be4:	4699      	mov	r9, r3
 8002be6:	46a2      	mov	sl, r4
 8002be8:	eb19 090b 	adds.w	r9, r9, fp
 8002bec:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002bf0:	f04f 0100 	mov.w	r1, #0
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bfc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c04:	4689      	mov	r9, r1
 8002c06:	4692      	mov	sl, r2
 8002c08:	eb1b 0509 	adds.w	r5, fp, r9
 8002c0c:	eb4c 060a 	adc.w	r6, ip, sl
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	4619      	mov	r1, r3
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	f04f 0300 	mov.w	r3, #0
 8002c1e:	f04f 0400 	mov.w	r4, #0
 8002c22:	0094      	lsls	r4, r2, #2
 8002c24:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c28:	008b      	lsls	r3, r1, #2
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	4623      	mov	r3, r4
 8002c2e:	4628      	mov	r0, r5
 8002c30:	4631      	mov	r1, r6
 8002c32:	f7fd fadb 	bl	80001ec <__aeabi_uldivmod>
 8002c36:	4603      	mov	r3, r0
 8002c38:	460c      	mov	r4, r1
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	4b9a      	ldr	r3, [pc, #616]	; (8002ea8 <UART_SetConfig+0x6f4>)
 8002c3e:	fba3 1302 	umull	r1, r3, r3, r2
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	2164      	movs	r1, #100	; 0x64
 8002c46:	fb01 f303 	mul.w	r3, r1, r3
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	3332      	adds	r3, #50	; 0x32
 8002c50:	4a95      	ldr	r2, [pc, #596]	; (8002ea8 <UART_SetConfig+0x6f4>)
 8002c52:	fba2 2303 	umull	r2, r3, r2, r3
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c5c:	4498      	add	r8, r3
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	469b      	mov	fp, r3
 8002c62:	f04f 0c00 	mov.w	ip, #0
 8002c66:	46d9      	mov	r9, fp
 8002c68:	46e2      	mov	sl, ip
 8002c6a:	eb19 0309 	adds.w	r3, r9, r9
 8002c6e:	eb4a 040a 	adc.w	r4, sl, sl
 8002c72:	4699      	mov	r9, r3
 8002c74:	46a2      	mov	sl, r4
 8002c76:	eb19 090b 	adds.w	r9, r9, fp
 8002c7a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c7e:	f04f 0100 	mov.w	r1, #0
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c92:	4689      	mov	r9, r1
 8002c94:	4692      	mov	sl, r2
 8002c96:	eb1b 0509 	adds.w	r5, fp, r9
 8002c9a:	eb4c 060a 	adc.w	r6, ip, sl
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	f04f 0300 	mov.w	r3, #0
 8002cac:	f04f 0400 	mov.w	r4, #0
 8002cb0:	0094      	lsls	r4, r2, #2
 8002cb2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002cb6:	008b      	lsls	r3, r1, #2
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4623      	mov	r3, r4
 8002cbc:	4628      	mov	r0, r5
 8002cbe:	4631      	mov	r1, r6
 8002cc0:	f7fd fa94 	bl	80001ec <__aeabi_uldivmod>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	460c      	mov	r4, r1
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4b77      	ldr	r3, [pc, #476]	; (8002ea8 <UART_SetConfig+0x6f4>)
 8002ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	2164      	movs	r1, #100	; 0x64
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	3332      	adds	r3, #50	; 0x32
 8002cde:	4a72      	ldr	r2, [pc, #456]	; (8002ea8 <UART_SetConfig+0x6f4>)
 8002ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce4:	095b      	lsrs	r3, r3, #5
 8002ce6:	f003 020f 	and.w	r2, r3, #15
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4442      	add	r2, r8
 8002cf0:	609a      	str	r2, [r3, #8]
 8002cf2:	e0d0      	b.n	8002e96 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cf4:	f7ff fce8 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 8002cf8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	469a      	mov	sl, r3
 8002cfe:	f04f 0b00 	mov.w	fp, #0
 8002d02:	46d0      	mov	r8, sl
 8002d04:	46d9      	mov	r9, fp
 8002d06:	eb18 0308 	adds.w	r3, r8, r8
 8002d0a:	eb49 0409 	adc.w	r4, r9, r9
 8002d0e:	4698      	mov	r8, r3
 8002d10:	46a1      	mov	r9, r4
 8002d12:	eb18 080a 	adds.w	r8, r8, sl
 8002d16:	eb49 090b 	adc.w	r9, r9, fp
 8002d1a:	f04f 0100 	mov.w	r1, #0
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d26:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d2a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d2e:	4688      	mov	r8, r1
 8002d30:	4691      	mov	r9, r2
 8002d32:	eb1a 0508 	adds.w	r5, sl, r8
 8002d36:	eb4b 0609 	adc.w	r6, fp, r9
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	f04f 0400 	mov.w	r4, #0
 8002d4c:	0094      	lsls	r4, r2, #2
 8002d4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d52:	008b      	lsls	r3, r1, #2
 8002d54:	461a      	mov	r2, r3
 8002d56:	4623      	mov	r3, r4
 8002d58:	4628      	mov	r0, r5
 8002d5a:	4631      	mov	r1, r6
 8002d5c:	f7fd fa46 	bl	80001ec <__aeabi_uldivmod>
 8002d60:	4603      	mov	r3, r0
 8002d62:	460c      	mov	r4, r1
 8002d64:	461a      	mov	r2, r3
 8002d66:	4b50      	ldr	r3, [pc, #320]	; (8002ea8 <UART_SetConfig+0x6f4>)
 8002d68:	fba3 2302 	umull	r2, r3, r3, r2
 8002d6c:	095b      	lsrs	r3, r3, #5
 8002d6e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	469b      	mov	fp, r3
 8002d76:	f04f 0c00 	mov.w	ip, #0
 8002d7a:	46d9      	mov	r9, fp
 8002d7c:	46e2      	mov	sl, ip
 8002d7e:	eb19 0309 	adds.w	r3, r9, r9
 8002d82:	eb4a 040a 	adc.w	r4, sl, sl
 8002d86:	4699      	mov	r9, r3
 8002d88:	46a2      	mov	sl, r4
 8002d8a:	eb19 090b 	adds.w	r9, r9, fp
 8002d8e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d92:	f04f 0100 	mov.w	r1, #0
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d9e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002da2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002da6:	4689      	mov	r9, r1
 8002da8:	4692      	mov	sl, r2
 8002daa:	eb1b 0509 	adds.w	r5, fp, r9
 8002dae:	eb4c 060a 	adc.w	r6, ip, sl
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	4619      	mov	r1, r3
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	f04f 0400 	mov.w	r4, #0
 8002dc4:	0094      	lsls	r4, r2, #2
 8002dc6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002dca:	008b      	lsls	r3, r1, #2
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4623      	mov	r3, r4
 8002dd0:	4628      	mov	r0, r5
 8002dd2:	4631      	mov	r1, r6
 8002dd4:	f7fd fa0a 	bl	80001ec <__aeabi_uldivmod>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	460c      	mov	r4, r1
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4b32      	ldr	r3, [pc, #200]	; (8002ea8 <UART_SetConfig+0x6f4>)
 8002de0:	fba3 1302 	umull	r1, r3, r3, r2
 8002de4:	095b      	lsrs	r3, r3, #5
 8002de6:	2164      	movs	r1, #100	; 0x64
 8002de8:	fb01 f303 	mul.w	r3, r1, r3
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	3332      	adds	r3, #50	; 0x32
 8002df2:	4a2d      	ldr	r2, [pc, #180]	; (8002ea8 <UART_SetConfig+0x6f4>)
 8002df4:	fba2 2303 	umull	r2, r3, r2, r3
 8002df8:	095b      	lsrs	r3, r3, #5
 8002dfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dfe:	4498      	add	r8, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	469b      	mov	fp, r3
 8002e04:	f04f 0c00 	mov.w	ip, #0
 8002e08:	46d9      	mov	r9, fp
 8002e0a:	46e2      	mov	sl, ip
 8002e0c:	eb19 0309 	adds.w	r3, r9, r9
 8002e10:	eb4a 040a 	adc.w	r4, sl, sl
 8002e14:	4699      	mov	r9, r3
 8002e16:	46a2      	mov	sl, r4
 8002e18:	eb19 090b 	adds.w	r9, r9, fp
 8002e1c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002e20:	f04f 0100 	mov.w	r1, #0
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e34:	4689      	mov	r9, r1
 8002e36:	4692      	mov	sl, r2
 8002e38:	eb1b 0509 	adds.w	r5, fp, r9
 8002e3c:	eb4c 060a 	adc.w	r6, ip, sl
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	4619      	mov	r1, r3
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	f04f 0400 	mov.w	r4, #0
 8002e52:	0094      	lsls	r4, r2, #2
 8002e54:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e58:	008b      	lsls	r3, r1, #2
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	4623      	mov	r3, r4
 8002e5e:	4628      	mov	r0, r5
 8002e60:	4631      	mov	r1, r6
 8002e62:	f7fd f9c3 	bl	80001ec <__aeabi_uldivmod>
 8002e66:	4603      	mov	r3, r0
 8002e68:	460c      	mov	r4, r1
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <UART_SetConfig+0x6f4>)
 8002e6e:	fba3 1302 	umull	r1, r3, r3, r2
 8002e72:	095b      	lsrs	r3, r3, #5
 8002e74:	2164      	movs	r1, #100	; 0x64
 8002e76:	fb01 f303 	mul.w	r3, r1, r3
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	3332      	adds	r3, #50	; 0x32
 8002e80:	4a09      	ldr	r2, [pc, #36]	; (8002ea8 <UART_SetConfig+0x6f4>)
 8002e82:	fba2 2303 	umull	r2, r3, r2, r3
 8002e86:	095b      	lsrs	r3, r3, #5
 8002e88:	f003 020f 	and.w	r2, r3, #15
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4442      	add	r2, r8
 8002e92:	609a      	str	r2, [r3, #8]
}
 8002e94:	e7ff      	b.n	8002e96 <UART_SetConfig+0x6e2>
 8002e96:	bf00      	nop
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ea0:	40011000 	.word	0x40011000
 8002ea4:	40011400 	.word	0x40011400
 8002ea8:	51eb851f 	.word	0x51eb851f

08002eac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002eac:	b084      	sub	sp, #16
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b084      	sub	sp, #16
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
 8002eb6:	f107 001c 	add.w	r0, r7, #28
 8002eba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d122      	bne.n	8002f0a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d105      	bne.n	8002efe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fa5c 	bl	80033bc <USB_CoreReset>
 8002f04:	4603      	mov	r3, r0
 8002f06:	73fb      	strb	r3, [r7, #15]
 8002f08:	e01a      	b.n	8002f40 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 fa50 	bl	80033bc <USB_CoreReset>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	639a      	str	r2, [r3, #56]	; 0x38
 8002f32:	e005      	b.n	8002f40 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d10b      	bne.n	8002f5e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f043 0206 	orr.w	r2, r3, #6
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f043 0220 	orr.w	r2, r3, #32
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f6a:	b004      	add	sp, #16
 8002f6c:	4770      	bx	lr

08002f6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f023 0201 	bic.w	r2, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002fa8:	78fb      	ldrb	r3, [r7, #3]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d106      	bne.n	8002fbc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	60da      	str	r2, [r3, #12]
 8002fba:	e00b      	b.n	8002fd4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d106      	bne.n	8002fd0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	60da      	str	r2, [r3, #12]
 8002fce:	e001      	b.n	8002fd4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e003      	b.n	8002fdc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002fd4:	2032      	movs	r0, #50	; 0x32
 8002fd6:	f7fd fecb 	bl	8000d70 <HAL_Delay>

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b086      	sub	sp, #24
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
 8002fee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002ff2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002ffe:	2300      	movs	r3, #0
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	e009      	b.n	8003018 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	3340      	adds	r3, #64	; 0x40
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	2200      	movs	r2, #0
 8003010:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	3301      	adds	r3, #1
 8003016:	613b      	str	r3, [r7, #16]
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	2b0e      	cmp	r3, #14
 800301c:	d9f2      	bls.n	8003004 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800301e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003020:	2b00      	cmp	r3, #0
 8003022:	d112      	bne.n	800304a <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003028:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003034:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003040:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	639a      	str	r2, [r3, #56]	; 0x38
 8003048:	e00b      	b.n	8003062 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003068:	461a      	mov	r2, r3
 800306a:	2300      	movs	r3, #0
 800306c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003074:	4619      	mov	r1, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800307c:	461a      	mov	r2, r3
 800307e:	680b      	ldr	r3, [r1, #0]
 8003080:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003084:	2b01      	cmp	r3, #1
 8003086:	d10c      	bne.n	80030a2 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308a:	2b00      	cmp	r3, #0
 800308c:	d104      	bne.n	8003098 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800308e:	2100      	movs	r1, #0
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f961 	bl	8003358 <USB_SetDevSpeed>
 8003096:	e008      	b.n	80030aa <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003098:	2101      	movs	r1, #1
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f95c 	bl	8003358 <USB_SetDevSpeed>
 80030a0:	e003      	b.n	80030aa <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80030a2:	2103      	movs	r1, #3
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f957 	bl	8003358 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80030aa:	2110      	movs	r1, #16
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f90b 	bl	80032c8 <USB_FlushTxFifo>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f929 	bl	8003314 <USB_FlushRxFifo>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d2:	461a      	mov	r2, r3
 80030d4:	2300      	movs	r3, #0
 80030d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030de:	461a      	mov	r2, r3
 80030e0:	2300      	movs	r3, #0
 80030e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ea:	461a      	mov	r2, r3
 80030ec:	2300      	movs	r3, #0
 80030ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030f0:	2300      	movs	r3, #0
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	e043      	b.n	800317e <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003108:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800310c:	d118      	bne.n	8003140 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10a      	bne.n	800312a <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	015a      	lsls	r2, r3, #5
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4413      	add	r3, r2
 800311c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003120:	461a      	mov	r2, r3
 8003122:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	e013      	b.n	8003152 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4413      	add	r3, r2
 8003132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003136:	461a      	mov	r2, r3
 8003138:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	e008      	b.n	8003152 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4413      	add	r3, r2
 8003148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800314c:	461a      	mov	r2, r3
 800314e:	2300      	movs	r3, #0
 8003150:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	015a      	lsls	r2, r3, #5
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4413      	add	r3, r2
 800315a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800315e:	461a      	mov	r2, r3
 8003160:	2300      	movs	r3, #0
 8003162:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4413      	add	r3, r2
 800316c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003170:	461a      	mov	r2, r3
 8003172:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003176:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	3301      	adds	r3, #1
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	429a      	cmp	r2, r3
 8003184:	d3b7      	bcc.n	80030f6 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003186:	2300      	movs	r3, #0
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	e043      	b.n	8003214 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4413      	add	r3, r2
 8003194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800319e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031a2:	d118      	bne.n	80031d6 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10a      	bne.n	80031c0 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	015a      	lsls	r2, r3, #5
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4413      	add	r3, r2
 80031b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b6:	461a      	mov	r2, r3
 80031b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	e013      	b.n	80031e8 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031cc:	461a      	mov	r2, r3
 80031ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	e008      	b.n	80031e8 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	015a      	lsls	r2, r3, #5
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4413      	add	r3, r2
 80031de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e2:	461a      	mov	r2, r3
 80031e4:	2300      	movs	r3, #0
 80031e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f4:	461a      	mov	r2, r3
 80031f6:	2300      	movs	r3, #0
 80031f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4413      	add	r3, r2
 8003202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003206:	461a      	mov	r2, r3
 8003208:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800320c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	3301      	adds	r3, #1
 8003212:	613b      	str	r3, [r7, #16]
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	429a      	cmp	r2, r3
 800321a:	d3b7      	bcc.n	800318c <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800322a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800322e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8003230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003232:	2b01      	cmp	r3, #1
 8003234:	d111      	bne.n	800325a <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800323c:	461a      	mov	r2, r3
 800323e:	4b20      	ldr	r3, [pc, #128]	; (80032c0 <USB_DevInit+0x2dc>)
 8003240:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003254:	f043 0303 	orr.w	r3, r3, #3
 8003258:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003266:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326a:	2b00      	cmp	r3, #0
 800326c:	d105      	bne.n	800327a <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	f043 0210 	orr.w	r2, r3, #16
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699a      	ldr	r2, [r3, #24]
 800327e:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <USB_DevInit+0x2e0>)
 8003280:	4313      	orrs	r3, r2
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	f043 0208 	orr.w	r2, r3, #8
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800329a:	2b01      	cmp	r3, #1
 800329c:	d107      	bne.n	80032ae <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032a6:	f043 0304 	orr.w	r3, r3, #4
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80032ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3718      	adds	r7, #24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032ba:	b004      	add	sp, #16
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	00800100 	.word	0x00800100
 80032c4:	803c3800 	.word	0x803c3800

080032c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	019b      	lsls	r3, r3, #6
 80032da:	f043 0220 	orr.w	r2, r3, #32
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	3301      	adds	r3, #1
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4a09      	ldr	r2, [pc, #36]	; (8003310 <USB_FlushTxFifo+0x48>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d901      	bls.n	80032f4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e006      	b.n	8003302 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	f003 0320 	and.w	r3, r3, #32
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	d0f0      	beq.n	80032e2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	00030d40 	.word	0x00030d40

08003314 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800331c:	2300      	movs	r3, #0
 800331e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2210      	movs	r2, #16
 8003324:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	3301      	adds	r3, #1
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4a09      	ldr	r2, [pc, #36]	; (8003354 <USB_FlushRxFifo+0x40>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d901      	bls.n	8003338 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e006      	b.n	8003346 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	f003 0310 	and.w	r3, r3, #16
 8003340:	2b10      	cmp	r3, #16
 8003342:	d0f0      	beq.n	8003326 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	00030d40 	.word	0x00030d40

08003358 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	68f9      	ldr	r1, [r7, #12]
 8003374:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003378:	4313      	orrs	r3, r2
 800337a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033a4:	f043 0302 	orr.w	r3, r3, #2
 80033a8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80033aa:	2003      	movs	r0, #3
 80033ac:	f7fd fce0 	bl	8000d70 <HAL_Delay>

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	3301      	adds	r3, #1
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4a13      	ldr	r2, [pc, #76]	; (8003420 <USB_CoreReset+0x64>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d901      	bls.n	80033da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e01b      	b.n	8003412 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	daf2      	bge.n	80033c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f043 0201 	orr.w	r2, r3, #1
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	3301      	adds	r3, #1
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4a09      	ldr	r2, [pc, #36]	; (8003420 <USB_CoreReset+0x64>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d901      	bls.n	8003404 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e006      	b.n	8003412 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b01      	cmp	r3, #1
 800340e:	d0f0      	beq.n	80033f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	00030d40 	.word	0x00030d40

08003424 <__libc_init_array>:
 8003424:	b570      	push	{r4, r5, r6, lr}
 8003426:	4e0d      	ldr	r6, [pc, #52]	; (800345c <__libc_init_array+0x38>)
 8003428:	4c0d      	ldr	r4, [pc, #52]	; (8003460 <__libc_init_array+0x3c>)
 800342a:	1ba4      	subs	r4, r4, r6
 800342c:	10a4      	asrs	r4, r4, #2
 800342e:	2500      	movs	r5, #0
 8003430:	42a5      	cmp	r5, r4
 8003432:	d109      	bne.n	8003448 <__libc_init_array+0x24>
 8003434:	4e0b      	ldr	r6, [pc, #44]	; (8003464 <__libc_init_array+0x40>)
 8003436:	4c0c      	ldr	r4, [pc, #48]	; (8003468 <__libc_init_array+0x44>)
 8003438:	f000 f820 	bl	800347c <_init>
 800343c:	1ba4      	subs	r4, r4, r6
 800343e:	10a4      	asrs	r4, r4, #2
 8003440:	2500      	movs	r5, #0
 8003442:	42a5      	cmp	r5, r4
 8003444:	d105      	bne.n	8003452 <__libc_init_array+0x2e>
 8003446:	bd70      	pop	{r4, r5, r6, pc}
 8003448:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800344c:	4798      	blx	r3
 800344e:	3501      	adds	r5, #1
 8003450:	e7ee      	b.n	8003430 <__libc_init_array+0xc>
 8003452:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003456:	4798      	blx	r3
 8003458:	3501      	adds	r5, #1
 800345a:	e7f2      	b.n	8003442 <__libc_init_array+0x1e>
 800345c:	080034b4 	.word	0x080034b4
 8003460:	080034b4 	.word	0x080034b4
 8003464:	080034b4 	.word	0x080034b4
 8003468:	080034b8 	.word	0x080034b8

0800346c <memset>:
 800346c:	4402      	add	r2, r0
 800346e:	4603      	mov	r3, r0
 8003470:	4293      	cmp	r3, r2
 8003472:	d100      	bne.n	8003476 <memset+0xa>
 8003474:	4770      	bx	lr
 8003476:	f803 1b01 	strb.w	r1, [r3], #1
 800347a:	e7f9      	b.n	8003470 <memset+0x4>

0800347c <_init>:
 800347c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347e:	bf00      	nop
 8003480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003482:	bc08      	pop	{r3}
 8003484:	469e      	mov	lr, r3
 8003486:	4770      	bx	lr

08003488 <_fini>:
 8003488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348a:	bf00      	nop
 800348c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800348e:	bc08      	pop	{r3}
 8003490:	469e      	mov	lr, r3
 8003492:	4770      	bx	lr
